{"remainingRequest":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/thread-loader/dist/cjs.js!/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/babel-loader/lib/index.js!/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/eslint-loader/index.js??ref--13-0!/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/src/store/modules/works.js","dependencies":[{"path":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/src/store/modules/works.js","mtime":1618025891405},{"path":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/cache-loader/dist/cjs.js","mtime":1618025539709},{"path":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/thread-loader/dist/cjs.js","mtime":1618025539860},{"path":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/babel-loader/lib/index.js","mtime":1618025539271},{"path":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/eslint-loader/index.js","mtime":1618025559964}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/src/store/modules/works.js"],"names":["vuexfireMutations","getField","updateField","db","worksRef","collection","namespaced","state","works","workId","workIndex","currentWork","title","caption","thumbURL","thumbFile","topicID","searchArray","getters","currentTopicWorks","actions","fetchWorks","rootState","commit","workList","where","topics","get","then","querySnapshot","docs","map","doc","workItem","data","push","id","console","log","clearWorkId","clearWorkFields","submitNewWork","dispatch","add","editWork","work","index","findIndex","e","submitEditWork","set","merge","deleteWork","delete","mutations","SET_TOPIC_WORKS","SET_WORK_TOPIC_ID","topicId","SET_WORK_ID","SET_CURRENT_WORK","SET_SEARCH_ARRAY","array","newArray","split","UPDATE_SEARCH_ARRAY"],"mappings":"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","sourcesContent":["import { vuexfireMutations } from \"vuexfire\";\nimport { getField, updateField } from \"vuex-map-fields\";\nimport { db } from \"../../firebase/db\";\n\nconst worksRef = db.collection(\"works\");\n\nexport default {\n  namespaced: true,\n\n  state: {\n    works: [],\n    workId: null,\n    workIndex: null,\n    currentWork: {\n      title: \"\",\n      caption: \"\",\n      thumbURL: \"\",\n      thumbFile: \"\",\n      topicID: [],\n      searchArray: [],\n    },\n  },\n\n  getters: {\n    getField,\n    currentTopicWorks: (state) => state.works,\n  },\n\n  actions: {\n    //* fetches list of works from firestore\n    async fetchWorks({ rootState, commit, state }) {\n      let workList = [];\n\n      await worksRef\n        .where(\"topicID\", \"array-contains-any\", [rootState.topics.topicID])\n        .get()\n        .then(async (querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            let workItem = doc.data();\n\n            //* appends unique work id to each work\n            workList.push({\n              ...workItem,\n              id: doc.id,\n            });\n          });\n          await commit(\"SET_TOPIC_WORKS\", workList);\n        });\n      console.log(state.works);\n    },\n\n    //* clears work id\n    clearWorkId({ commit }) {\n      commit(\"SET_WORK_ID\", null);\n    },\n\n    //* clears work fields\n    clearWorkFields({ commit }) {\n      commit(\"SET_CURRENT_WORK\", {\n        title: \"\",\n        caption: \"\",\n        thumbURL: \"\",\n        thumbFile: \"\",\n        topicID: [],\n        searchArray: [],\n      });\n    },\n\n    //* handles submit new work data\n    async submitNewWork({ commit, rootState, state, dispatch }) {\n      commit(\"SET_WORK_TOPIC_ID\", rootState.topics.topicID);\n      commit(\"SET_SEARCH_ARRAY\", state.currentWork.title);\n      //* adds new work in firestore database\n      await worksRef.add(state.currentWork).then(() => {\n        console.log(\"Work added\");\n      });\n\n      dispatch(\"fetchWorks\");\n\n      dispatch(\"clearWorkFields\");\n    },\n\n    //* sets current work for edit\n    async editWork({ commit, state }, work) {\n      commit(\"SET_WORK_ID\", work.id);\n\n      //* returns the index of the work for edit\n      let index = state.works.findIndex((e) => e.id == work.id);\n\n      //* identifies the current work for edit using the index\n      let currentWork = state.works[index];\n      commit(\"SET_CURRENT_WORK\", currentWork);\n    },\n\n    //* submit edited work\n    async submitEditWork({ state, dispatch, commit }) {\n      await commit(\"UPDATE_SEARCH_ARRAY\", state.currentWork.title);\n      await worksRef\n        .doc(state.workId)\n        .set(state.currentWork, { merge: true })\n        .then(() => {\n          console.log(\"Submit edit for \" + state.currentWork.title);\n        });\n      dispatch(\"fetchWorks\");\n      dispatch(\"clearWorkId\");\n      dispatch(\"clearWorkFields\");\n    },\n\n    //* delete work\n    async deleteWork({ state, commit, dispatch }, work) {\n      await commit(\"SET_WORK_ID\", work.id);\n      await worksRef\n        .doc(state.workId)\n        .delete()\n        .then(() => {\n          console.log(\"Succesfully deleted\");\n        });\n\n      //* finds and sets the index for delete\n      dispatch(\"fetchWorks\");\n      commit(\"SET_WORK_ID\", null);\n      dispatch(\"clearWorkFields\");\n    },\n  },\n\n  mutations: {\n    ...vuexfireMutations,\n    updateField,\n    SET_TOPIC_WORKS: (state, works) => (state.works = works),\n    SET_WORK_TOPIC_ID: (state, topicId) => {\n      state.currentWork.topicID.push(topicId);\n    },\n    SET_WORK_ID: (state, id) => (state.workId = id),\n    SET_CURRENT_WORK: (state, work) => (state.currentWork = work),\n    SET_SEARCH_ARRAY: (state, array) => {\n      //* splits the words into strings and stores in newArray\n      let newArray = array.split(\" \");\n      state.currentWork.searchArray.push(...newArray);\n    },\n    UPDATE_SEARCH_ARRAY: (state, array) => {\n      let newArray = array.split(\" \");\n      state.currentWork.searchArray = newArray;\n    },\n  },\n};\n"]}]}
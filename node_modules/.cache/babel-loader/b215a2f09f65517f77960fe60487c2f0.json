{"remainingRequest":"/Users/priscilla_cancar/Documents/Websites/ap-study-bites-admin/node_modules/babel-loader/lib/index.js!/Users/priscilla_cancar/Documents/Websites/ap-study-bites-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/priscilla_cancar/Documents/Websites/ap-study-bites-admin/src/store/modules/terminology.js","dependencies":[{"path":"/Users/priscilla_cancar/Documents/Websites/ap-study-bites-admin/src/store/modules/terminology.js","mtime":1619331175822},{"path":"/Users/priscilla_cancar/Documents/Websites/ap-study-bites-admin/node_modules/cache-loader/dist/cjs.js","mtime":1618025539709},{"path":"/Users/priscilla_cancar/Documents/Websites/ap-study-bites-admin/node_modules/babel-loader/lib/index.js","mtime":1618025539271},{"path":"/Users/priscilla_cancar/Documents/Websites/ap-study-bites-admin/node_modules/eslint-loader/index.js","mtime":1618025559964}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvcHJpc2NpbGxhX2NhbmNhci9Eb2N1bWVudHMvV2Vic2l0ZXMvYXAtc3R1ZHktYml0ZXMtYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL3ByaXNjaWxsYV9jYW5jYXIvRG9jdW1lbnRzL1dlYnNpdGVzL2FwLXN0dWR5LWJpdGVzLWFkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3ByaXNjaWxsYV9jYW5jYXIvRG9jdW1lbnRzL1dlYnNpdGVzL2FwLXN0dWR5LWJpdGVzLWFkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IHsgdnVleGZpcmVNdXRhdGlvbnMgfSBmcm9tICJ2dWV4ZmlyZSI7CmltcG9ydCB7IGdldEZpZWxkLCB1cGRhdGVGaWVsZCB9IGZyb20gInZ1ZXgtbWFwLWZpZWxkcyI7CmltcG9ydCB7IGRiIH0gZnJvbSAiLi4vLi4vZmlyZWJhc2UvZGIiOwp2YXIgdGVybVJlZiA9IGRiLmNvbGxlY3Rpb24oInRlcm1pbm9sb2d5Iik7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiB7CiAgICB0ZXJtczogW10sCiAgICB0ZXJtSWQ6IG51bGwsCiAgICB0ZXJtSW5kZXg6IG51bGwsCiAgICBjdXJyZW50VGVybTogewogICAgICB0ZXJtOiAiIiwKICAgICAgZGVmOiAiIiwKICAgICAgc2VhcmNoQXJyYXk6IFtdLAogICAgICB0b3BpY0lEOiBbXQogICAgfSwKICAgIHRlcm1Gb3JFZGl0OiB7CiAgICAgIHRlcm06ICIiLAogICAgICBkZWY6ICIiLAogICAgICBzZWFyY2hBcnJheTogW10sCiAgICAgIHRvcGljSUQ6IFtdCiAgICB9CiAgfSwKICBnZXR0ZXJzOiB7CiAgICBnZXRGaWVsZDogZ2V0RmllbGQsCiAgICBjdXJyZW50VG9waWNUZXJtczogZnVuY3Rpb24gY3VycmVudFRvcGljVGVybXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnRlcm1zOwogICAgfSwKICAgIGN1cnJlbnRUZXJtSWQ6IGZ1bmN0aW9uIGN1cnJlbnRUZXJtSWQoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnRlcm1JZDsKICAgIH0sCiAgICBjdXJyZW50VGVybTogZnVuY3Rpb24gY3VycmVudFRlcm0oc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmN1cnJlbnRUZXJtOwogICAgfSwKICAgIGJ1dHRvbkxhYmVsOiBmdW5jdGlvbiBidXR0b25MYWJlbChzdGF0ZSkgewogICAgICBpZiAoc3RhdGUudGVybUlkICE9IG51bGwpIHsKICAgICAgICByZXR1cm4gIkVkaXQgVGVybSI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICIrIEFkZCBUZXJtIjsKICAgICAgfQogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgLy8qIGZldGNoZXMgbGlzdCBvZiB0ZXJtcyBmcm9tIGZpcmVzdG9yZQogICAgZmV0Y2hUZXJtczogZnVuY3Rpb24gZmV0Y2hUZXJtcyhfcmVmKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciByb290U3RhdGUsIGNvbW1pdCwgc3RhdGUsIHRlcm1MaXN0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290U3RhdGUgPSBfcmVmLnJvb3RTdGF0ZSwgY29tbWl0ID0gX3JlZi5jb21taXQsIHN0YXRlID0gX3JlZi5zdGF0ZTsKICAgICAgICAgICAgICAgIHRlcm1MaXN0ID0gW107CiAgICAgICAgICAgICAgICB0ZXJtUmVmLndoZXJlKCJ0b3BpY0lEIiwgImFycmF5LWNvbnRhaW5zLWFueSIsIFtyb290U3RhdGUudG9waWNzLnRvcGljSURdKS5nZXQoKS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocXVlcnlTbmFwc2hvdCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5U25hcHNob3QuZG9jcy5tYXAoZnVuY3Rpb24gKGRvYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVybUl0ZW0gPSBkb2MuZGF0YSgpOyAvLyogYXBwZW5kcyB1bmlxdWUgdGVybSBpZCB0byBlYWNoIGlkCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtTGlzdC5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGVybUl0ZW0pLCB7fSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBkb2MuaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoIlNFVF9UT1BJQ19URVJNUyIsIHRlcm1MaXN0KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0ZS50ZXJtcyk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vKiBjbGVhcnMgdGVybSBpZAogICAgY2xlYXJUZXJtSWQ6IGZ1bmN0aW9uIGNsZWFyVGVybUlkKF9yZWYzKSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmMy5jb21taXQ7CiAgICAgIGNvbW1pdCgiU0VUX1RFUk1fSUQiLCBudWxsKTsKICAgIH0sCiAgICAvLyogaGFuZGxlcyBzdWJtaXQgbmV3IHRlcm0gZGF0YQogICAgc3VibWl0TmV3VGVybTogZnVuY3Rpb24gc3VibWl0TmV3VGVybShfcmVmNCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290U3RhdGUsIHN0YXRlLCBkaXNwYXRjaDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjQuY29tbWl0LCByb290U3RhdGUgPSBfcmVmNC5yb290U3RhdGUsIHN0YXRlID0gX3JlZjQuc3RhdGUsIGRpc3BhdGNoID0gX3JlZjQuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJTRVRfVEVSTV9UT1BJQ19JRCIsIHJvb3RTdGF0ZS50b3BpY3MudG9waWNJRCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoIlNFVF9TRUFSQ0hfQVJSQVkiLCBzdGF0ZS5jdXJyZW50VGVybS50ZXJtKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRlcm1SZWYuYWRkKHN0YXRlLmN1cnJlbnRUZXJtKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIlRlcm0gQWRkZWQiKTsKICAgICAgICAgICAgICAgICAgYWxlcnQoIlN1Y2Nlc3NmdWxseSBhZGRlZCBhIHRlcm1pbm9sb2d5Iik7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgLy8qIGZldGNoIG5ldyBsaXN0IG9mIHRlcm1zCiAgICAgICAgICAgICAgICBkaXNwYXRjaCgiZmV0Y2hUZXJtcyIpOyAvLyogY2xlYXJzIHRoZSBmaWVsZHMKCiAgICAgICAgICAgICAgICBkaXNwYXRjaCgiY2xlYXJGaWVsZHMiKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8qIGNsZWFyIGZpZWxkcwogICAgY2xlYXJGaWVsZHM6IGZ1bmN0aW9uIGNsZWFyRmllbGRzKF9yZWY1KSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmNS5jb21taXQ7CiAgICAgIGNvbW1pdCgiU0VUX0NVUlJFTlRfVEVSTSIsIHsKICAgICAgICB0ZXJtOiAiIiwKICAgICAgICBkZWY6ICIiLAogICAgICAgIHNlYXJjaEFycmF5OiBbXSwKICAgICAgICB0b3BpY0lEOiBbXQogICAgICB9KTsKICAgIH0sCiAgICAvLyogc2V0cyBjdXJyZW50IHRlcm0gZm9yIGVkaXQKICAgIGVkaXRUZXJtOiBmdW5jdGlvbiBlZGl0VGVybShfcmVmNiwgdGVybSkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjYuY29tbWl0LAogICAgICAgICAgc3RhdGUgPSBfcmVmNi5zdGF0ZTsKICAgICAgY29tbWl0KCJTRVRfVEVSTV9JRCIsIHRlcm0uaWQpOyAvLyogcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIHRlcm0gZm9yIGVkaXQKCiAgICAgIHZhciBpbmRleCA9IHN0YXRlLnRlcm1zLmZpbmRJbmRleChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlLmlkID09IHRlcm0uaWQ7CiAgICAgIH0pOyAvLyogaWRlbnRpZmllcyB0aGUgY3VycmVudCB0ZXJtIGZvciBlZGl0IHVzaW5nIHRoZSBpbmRleAoKICAgICAgdmFyIGN1cnJlbnRUZXJtID0gc3RhdGUudGVybXNbaW5kZXhdOyAvLyBjb21taXQoIlNFVF9URVJNX0lOREVYIiwgaW5kZXgpOwoKICAgICAgY29tbWl0KCJTRVRfQ1VSUkVOVF9URVJNIiwgY3VycmVudFRlcm0pOwogICAgfSwKICAgIC8vKiBzdWJtaXQgZWRpdCB0ZXJtCiAgICBzdWJtaXRFZGl0VGVybTogZnVuY3Rpb24gc3VibWl0RWRpdFRlcm0oX3JlZjcpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIHN0YXRlLCBkaXNwYXRjaCwgY29tbWl0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWY3LnN0YXRlLCBkaXNwYXRjaCA9IF9yZWY3LmRpc3BhdGNoLCBjb21taXQgPSBfcmVmNy5jb21taXQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJVUERBVEVfU0VBUkNIX0FSUkFZIiwgc3RhdGUuY3VycmVudFRlcm0udGVybSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiB0ZXJtUmVmLmRvYyhzdGF0ZS50ZXJtSWQpLnNldChzdGF0ZS5jdXJyZW50VGVybSwgewogICAgICAgICAgICAgICAgICBtZXJnZTogdHJ1ZQogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJTdWJtaXQgRWRpdCBmb3IgIiArIHN0YXRlLmN1cnJlbnRUZXJtLnRlcm0pOwogICAgICAgICAgICAgICAgICBhbGVydCgiU3VjY2VzZnVsbHkgZWRpdGVkIGEgdGVybWlub2xvZ3kiKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBkaXNwYXRjaCgiZmV0Y2hUZXJtcyIpOyAvLyogY2xlYXJzIHRoZSBmaWVsZHMKCiAgICAgICAgICAgICAgICBkaXNwYXRjaCgiY2xlYXJGaWVsZHMiKTsKICAgICAgICAgICAgICAgIGRpc3BhdGNoKCJjbGVhclRlcm1JZCIpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyogZGVsZXRlIHRlcm0KICAgIGRlbGV0ZVRlcm06IGZ1bmN0aW9uIGRlbGV0ZVRlcm0oX3JlZjgsIHRlcm0pIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgdmFyIHN0YXRlLCBjb21taXQsIGRpc3BhdGNoOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWY4LnN0YXRlLCBjb21taXQgPSBfcmVmOC5jb21taXQsIGRpc3BhdGNoID0gX3JlZjguZGlzcGF0Y2g7CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJTRVRfVEVSTV9JRCIsIHRlcm0uaWQpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGVybVJlZi5kb2Moc3RhdGUudGVybUlkKS5kZWxldGUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIlN1Y2Nlc3NmdWxseSBkZWxldGVkIik7CiAgICAgICAgICAgICAgICAgIGFsZXJ0KCJTdWNjZXNzZnVsbHkgZGVsZXRlZCBhIHRlcm1pbm9sb2d5Iik7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgZGlzcGF0Y2goImZldGNoVGVybXMiKTsKICAgICAgICAgICAgICAgIGNvbW1pdCgiU0VUX1RFUk1fSUQiLCBudWxsKTsKICAgICAgICAgICAgICAgIGRpc3BhdGNoKCJjbGVhckZpZWxkcyIpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhdGUudGVybXMpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUpOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIG11dGF0aW9uczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2dWV4ZmlyZU11dGF0aW9ucyksIHt9LCB7CiAgICB1cGRhdGVGaWVsZDogdXBkYXRlRmllbGQsCiAgICBTRVRfVE9QSUNfVEVSTVM6IGZ1bmN0aW9uIFNFVF9UT1BJQ19URVJNUyhzdGF0ZSwgdGVybXMpIHsKICAgICAgcmV0dXJuIHN0YXRlLnRlcm1zID0gdGVybXM7CiAgICB9LAogICAgQ0xFQVJfVEVSTV9JRDogZnVuY3Rpb24gQ0xFQVJfVEVSTV9JRChzdGF0ZSwgaWQpIHsKICAgICAgcmV0dXJuIHN0YXRlLnRlcm1JZCA9IGlkOwogICAgfSwKICAgIFNFVF9URVJNX1RPUElDX0lEOiBmdW5jdGlvbiBTRVRfVEVSTV9UT1BJQ19JRChzdGF0ZSwgdG9waWNJRCkgewogICAgICBzdGF0ZS5jdXJyZW50VGVybS50b3BpY0lELnB1c2godG9waWNJRCk7CiAgICB9LAogICAgQUREX1RFUk1fVE9fTElTVDogZnVuY3Rpb24gQUREX1RFUk1fVE9fTElTVChzdGF0ZSwgdGVybSkgewogICAgICByZXR1cm4gc3RhdGUudGVybXMudW5zaGlmdCh0ZXJtKTsKICAgIH0sCiAgICBTRVRfQ1VSUkVOVF9URVJNOiBmdW5jdGlvbiBTRVRfQ1VSUkVOVF9URVJNKHN0YXRlLCBmaWVsZHMpIHsKICAgICAgcmV0dXJuIHN0YXRlLmN1cnJlbnRUZXJtID0gZmllbGRzOwogICAgfSwKICAgIFNFVF9URVJNX0lEOiBmdW5jdGlvbiBTRVRfVEVSTV9JRChzdGF0ZSwgdGVybUlkKSB7CiAgICAgIHJldHVybiBzdGF0ZS50ZXJtSWQgPSB0ZXJtSWQ7CiAgICB9LAogICAgU0VUX1RFUk1fSU5ERVg6IGZ1bmN0aW9uIFNFVF9URVJNX0lOREVYKHN0YXRlLCBpbmRleCkgewogICAgICByZXR1cm4gc3RhdGUudGVybUluZGV4ID0gaW5kZXg7CiAgICB9LAogICAgREVMRVRFX1RFUk06IGZ1bmN0aW9uIERFTEVURV9URVJNKHN0YXRlLCBpbmRleCkgewogICAgICByZXR1cm4gc3RhdGUudGVybXMuc3BsaWNlKGluZGV4LCAxKTsKICAgIH0sCiAgICBTRVRfU0VBUkNIX0FSUkFZOiBmdW5jdGlvbiBTRVRfU0VBUkNIX0FSUkFZKHN0YXRlLCBhcnJheSkgewogICAgICB2YXIgX3N0YXRlJGN1cnJlbnRUZXJtJHNlOwoKICAgICAgLy8qIHNwbGl0cyB0aGUgd29yZHMgaW50byBzdHJpbmdzIGFuZCBzdG9yZXMgaW4gbmV3QXJyYXkKICAgICAgdmFyIG5ld0FycmF5ID0gYXJyYXkuc3BsaXQoIiAiKTsKCiAgICAgIChfc3RhdGUkY3VycmVudFRlcm0kc2UgPSBzdGF0ZS5jdXJyZW50VGVybS5zZWFyY2hBcnJheSkucHVzaC5hcHBseShfc3RhdGUkY3VycmVudFRlcm0kc2UsIF90b0NvbnN1bWFibGVBcnJheShuZXdBcnJheSkpOwogICAgfSwKICAgIFVQREFURV9TRUFSQ0hfQVJSQVk6IGZ1bmN0aW9uIFVQREFURV9TRUFSQ0hfQVJSQVkoc3RhdGUsIGFycmF5KSB7CiAgICAgIHZhciBuZXdBcnJheSA9IGFycmF5LnNwbGl0KCIgIik7CiAgICAgIHN0YXRlLmN1cnJlbnRUZXJtLnNlYXJjaEFycmF5ID0gbmV3QXJyYXk7CiAgICB9IC8vIFVQREFURV9URVJNOiAoc3RhdGUsIHRlcm0pID0+IChzdGF0ZS50ZXJtc1tzdGF0ZS50ZXJtSW5kZXhdID0gdGVybSksCgogIH0pCn07"},{"version":3,"sources":["/Users/priscilla_cancar/Documents/Websites/ap-study-bites-admin/src/store/modules/terminology.js"],"names":["vuexfireMutations","getField","updateField","db","termRef","collection","namespaced","state","terms","termId","termIndex","currentTerm","term","def","searchArray","topicID","termForEdit","getters","currentTopicTerms","currentTermId","buttonLabel","actions","fetchTerms","rootState","commit","termList","where","topics","get","then","querySnapshot","docs","map","doc","termItem","data","push","id","console","log","clearTermId","submitNewTerm","dispatch","add","alert","clearFields","editTerm","index","findIndex","e","submitEditTerm","set","merge","deleteTerm","delete","mutations","SET_TOPIC_TERMS","CLEAR_TERM_ID","SET_TERM_TOPIC_ID","ADD_TERM_TO_LIST","unshift","SET_CURRENT_TERM","fields","SET_TERM_ID","SET_TERM_INDEX","DELETE_TERM","splice","SET_SEARCH_ARRAY","array","newArray","split","UPDATE_SEARCH_ARRAY"],"mappings":"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","sourcesContent":["import { vuexfireMutations } from \"vuexfire\";\nimport { getField, updateField } from \"vuex-map-fields\";\nimport { db } from \"../../firebase/db\";\n\nconst termRef = db.collection(\"terminology\");\n\nexport default {\n  namespaced: true,\n\n  state: {\n    terms: [],\n    termId: null,\n    termIndex: null,\n    currentTerm: {\n      term: \"\",\n      def: \"\",\n      searchArray: [],\n      topicID: [],\n    },\n    termForEdit: {\n      term: \"\",\n      def: \"\",\n      searchArray: [],\n      topicID: [],\n    },\n  },\n\n  getters: {\n    getField,\n    currentTopicTerms: (state) => state.terms,\n    currentTermId: (state) => state.termId,\n    currentTerm: (state) => state.currentTerm,\n    buttonLabel: (state) => {\n      if (state.termId != null) {\n        return \"Edit Term\";\n      } else {\n        return \"+ Add Term\";\n      }\n    },\n  },\n\n  actions: {\n    //* fetches list of terms from firestore\n    async fetchTerms({ rootState, commit, state }) {\n      let termList = [];\n\n      termRef\n        .where(\"topicID\", \"array-contains-any\", [rootState.topics.topicID])\n        .get()\n        .then(async (querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            let termItem = doc.data();\n\n            //* appends unique term id to each id\n            termList.push({\n              ...termItem,\n              id: doc.id,\n            });\n          }),\n            await commit(\"SET_TOPIC_TERMS\", termList);\n        });\n      console.log(state.terms);\n    },\n\n    //* clears term id\n    clearTermId({ commit }) {\n      commit(\"SET_TERM_ID\", null);\n    },\n\n    //* handles submit new term data\n    async submitNewTerm({ commit, rootState, state, dispatch }) {\n      await commit(\"SET_TERM_TOPIC_ID\", rootState.topics.topicID);\n      await commit(\"SET_SEARCH_ARRAY\", state.currentTerm.term);\n      //* adds new term in firestore database\n      await termRef.add(state.currentTerm).then(() => {\n        console.log(\"Term Added\");\n        alert(\"Successfully added a terminology\")\n      });\n\n      //* fetch new list of terms\n      dispatch(\"fetchTerms\");\n\n      //* clears the fields\n      dispatch(\"clearFields\");\n    },\n\n    //* clear fields\n    clearFields({ commit }) {\n      commit(\"SET_CURRENT_TERM\", {\n        term: \"\",\n        def: \"\",\n        searchArray: [],\n        topicID: [],\n      });\n    },\n\n    //* sets current term for edit\n    editTerm({ commit, state }, term) {\n      commit(\"SET_TERM_ID\", term.id);\n\n      //* returns the index of the term for edit\n      let index = state.terms.findIndex((e) => e.id == term.id);\n\n      //* identifies the current term for edit using the index\n      let currentTerm = state.terms[index];\n      // commit(\"SET_TERM_INDEX\", index);\n      commit(\"SET_CURRENT_TERM\", currentTerm);\n    },\n\n    //* submit edit term\n    async submitEditTerm({ state, dispatch, commit }) {\n      await commit(\"UPDATE_SEARCH_ARRAY\", state.currentTerm.term);\n      await termRef\n        .doc(state.termId)\n        .set(state.currentTerm, { merge: true })\n        .then(() => {\n          console.log(\"Submit Edit for \" + state.currentTerm.term);\n          alert(\"Succesfully edited a terminology\")\n        });\n      dispatch(\"fetchTerms\");\n\n      //* clears the fields\n      dispatch(\"clearFields\");\n      dispatch(\"clearTermId\");\n    },\n\n    //* delete term\n    async deleteTerm({ state, commit, dispatch }, term) {\n      await commit(\"SET_TERM_ID\", term.id);\n      await termRef\n        .doc(state.termId)\n        .delete()\n        .then(() => {\n          console.log(\"Successfully deleted\");\n          alert(\"Successfully deleted a terminology\")\n        });\n      dispatch(\"fetchTerms\");\n      commit(\"SET_TERM_ID\", null);\n      dispatch(\"clearFields\");\n      console.log(state.terms);\n    },\n  },\n\n  mutations: {\n    ...vuexfireMutations,\n    updateField,\n    SET_TOPIC_TERMS: (state, terms) => (state.terms = terms),\n    CLEAR_TERM_ID: (state, id) => (state.termId = id),\n    SET_TERM_TOPIC_ID: (state, topicID) => {\n      state.currentTerm.topicID.push(topicID);\n    },\n    ADD_TERM_TO_LIST: (state, term) => state.terms.unshift(term),\n    SET_CURRENT_TERM: (state, fields) => (state.currentTerm = fields),\n    SET_TERM_ID: (state, termId) => (state.termId = termId),\n    SET_TERM_INDEX: (state, index) => (state.termIndex = index),\n    DELETE_TERM: (state, index) => state.terms.splice(index, 1),\n    SET_SEARCH_ARRAY: (state, array) => {\n      //* splits the words into strings and stores in newArray\n      let newArray = array.split(\" \");\n      state.currentTerm.searchArray.push(...newArray);\n    },\n    UPDATE_SEARCH_ARRAY: (state, array) => {\n      let newArray = array.split(\" \");\n      state.currentTerm.searchArray = newArray;\n    },\n    // UPDATE_TERM: (state, term) => (state.terms[state.termIndex] = term),\n  },\n};\n"]}]}
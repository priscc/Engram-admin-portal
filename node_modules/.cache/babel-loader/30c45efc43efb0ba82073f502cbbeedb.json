{"remainingRequest":"/Users/priscilla_cancar/Documents/Websites/StudyBites/study-bites/node_modules/babel-loader/lib/index.js!/Users/priscilla_cancar/Documents/Websites/StudyBites/study-bites/node_modules/eslint-loader/index.js??ref--13-0!/Users/priscilla_cancar/Documents/Websites/StudyBites/study-bites/src/store/modules/topics.js","dependencies":[{"path":"/Users/priscilla_cancar/Documents/Websites/StudyBites/study-bites/src/store/modules/topics.js","mtime":1619331175823},{"path":"/Users/priscilla_cancar/Documents/Websites/StudyBites/study-bites/node_modules/cache-loader/dist/cjs.js","mtime":1618025539709},{"path":"/Users/priscilla_cancar/Documents/Websites/StudyBites/study-bites/node_modules/babel-loader/lib/index.js","mtime":1618025539271},{"path":"/Users/priscilla_cancar/Documents/Websites/StudyBites/study-bites/node_modules/eslint-loader/index.js","mtime":1618025559964}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/priscilla_cancar/Documents/Websites/StudyBites/study-bites/src/store/modules/topics.js"],"names":["vuexfireMutations","firestoreAction","db","getField","updateField","router","topicsRef","collection","resourcesRef","namespaced","state","topics","topicID","currentTopic","title","introMD","intro_thumbFile","intro_thumbURL","topic_thumbFile","topic_thumbURL","disabled","timePeriod","searchArray","videoID","videoURL","resources","articles","videos","getters","allTopics","currentId","currentResources","currentArticles","actions","bindTopics","bindFirestoreRef","addTopicForm","commit","fields","console","log","submitNewTopic","add","then","replace","path","alert","catch","err","fetchTopics","documents","get","querySnapshot","docs","map","doc","topicItemData","data","push","id","result","reduce","r","a","Object","create","editTopic","topic","period","keys","filter","time","parseInt","topicList","index","findIndex","e","submitEditTopic","set","merge","fetchArticles","articlesList","where","articleItem","mutations","SET_TOPICS","SET_ID","SET_CURRENT_TOPIC","SET_ARTICLES","SET_SEARCH_ARRAY","array","newArray","split","UPDATE_SEARCH_ARRAY"],"mappings":"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","sourcesContent":["import { vuexfireMutations, firestoreAction } from \"vuexfire\";\nimport { db } from \"../../firebase/db\";\nimport { getField, updateField } from \"vuex-map-fields\";\nimport router from \"../../router\";\n\nconst topicsRef = db.collection(\"topics\");\nconst resourcesRef = db.collection(\"resources\");\n\nexport default {\n  namespaced: true,\n  state: {\n    topics: [],\n    topicID: null,\n    currentTopic: {\n      title: \"\",\n      introMD: \"\",\n      intro_thumbFile: \"\",\n      intro_thumbURL: \"\",\n      topic_thumbFile: \"\",\n      topic_thumbURL: \"\",\n      disabled: true,\n      timePeriod: null,\n      searchArray: [],\n    },\n    videoID: null,\n    videoURL: null,\n    resources: [],\n    articles: [],\n    videos: [],\n  },\n\n  getters: {\n    allTopics: (state) => state.topics,\n    currentId: (state) => state.topicID,\n    currentTopic: (state) => state.currentTopic,\n    currentResources: (state) => state.resources,\n    currentArticles: (state) => state.articles,\n    getField,\n  },\n\n  actions: {\n    bindTopics: firestoreAction(({ bindFirestoreRef }) => {\n      // return the promise returned by `bindFirestoreRef`\n      return bindFirestoreRef(\"topics\", db.collection(\"topics\"));\n    }),\n\n    //* add topic\n    async addTopicForm({ state, commit }) {\n      const fields = {\n        title: \"\",\n        introMD: \"\",\n        intro_thumbFile: \"\",\n        intro_thumbURL: \"\",\n        topic_thumbFile: \"\",\n        topic_thumbURL: \"\",\n        disabled: true,\n        timePeriod: null,\n        searchArray: [],\n      };\n      await commit(\"SET_CURRENT_TOPIC\", fields);\n      console.log(state.currentTopic);\n    },\n\n    //* submit new topic\n    async submitNewTopic({ state, commit }) {\n\n      commit(\"SET_SEARCH_ARRAY\", state.currentTopic.title)\n\n      await topicsRef\n        .add(state.currentTopic)\n        .then(() => {\n          console.log(\"Submitted New Topic\");\n          router.replace({ path: \"/addcontent\" });\n          alert(\"Successfully added a topic\")\n        })\n        .catch((err) => {\n          console.log(err);\n          return false;\n        });\n      console.log(state.currentTopic);\n    },\n\n    //* fetches all topics from firestore\n    async fetchTopics({ commit }) {\n      let documents = [];\n      await topicsRef.get().then((querySnapshot) => {\n        querySnapshot.docs.map((doc) => {\n          let topicItemData = doc.data();\n          //* gets the unique topic id and appends it in each topic\n          documents.push({\n            ...topicItemData,\n            id: doc.id,\n          });\n        });\n        //* sorts the topics according to its time period\n        const result = documents.reduce(function(r, a) {\n          r[a.timePeriod] = r[a.timePeriod] || [];\n          r[a.timePeriod].push(a);\n          return r;\n        }, Object.create(null));\n        commit(\"SET_TOPICS\", result);\n      });\n    },\n\n    //* topic id gets stored to the state and used in querying the specific topic\n    async editTopic({ state, commit }, topic) {\n      \n      await commit(\"SET_ID\", topic.id);\n      //* identifies the time period of the topic for edit\n      let period = Object.keys(state.topics).filter(\n        (time) => time == topic.timePeriod\n      );\n      let timePeriod = parseInt(period[0]);\n\n      //* sets the list of array under one time period\n      let topicList = state.topics[timePeriod];\n      let index = topicList.findIndex((e) => e.id == topic.id);\n\n      //* identifies the current topic for edit\n      let currentTopic = topicList[index];\n      commit(\"SET_CURRENT_TOPIC\", currentTopic);\n    },\n\n    //* handles submit for edit topic\n    async submitEditTopic({ state, commit }) {\n      commit(\"UPDATE_SEARCH_ARRAY\", state.currentTopic.title);\n      await topicsRef\n        .doc(state.topicID)\n        .set(state.currentTopic, { merge: true })\n        .then(() => {\n          console.log(\"Submitted Edited Topic\");\n          alert(\"Successfully edited topic\")\n        });\n    },\n\n    //* gets all articles for a topic\n    async fetchArticles({ state, commit }) {\n      let articlesList = [];\n\n      await resourcesRef\n        .where(\"topicID\", \"array-contains-any\", [state.topicID])\n        .where(\"parentType\", \"==\", \"topic\")\n        .where(\"resourceType\", \"==\", \"article\")\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            let articleItem = doc.data();\n\n            //* appends unique article id to each article\n            articlesList.push({\n              ...articleItem,\n              id: doc.id,\n            });\n          });\n          commit(\"SET_ARTICLES\", articlesList);\n        });\n    },\n  },\n\n  mutations: {\n    ...vuexfireMutations,\n    SET_TOPICS: (state, topics) => (state.topics = topics),\n    SET_ID: (state, id) => (state.topicID = id),\n    SET_CURRENT_TOPIC: (state, topic) => (state.currentTopic = topic),\n    SET_ARTICLES: (state, articles) => (state.articles = articles),\n    SET_SEARCH_ARRAY: (state, array) => {\n      //* splits the words into strings and stores in newArray\n      let newArray = array.split(\" \");\n      state.currentTopic.searchArray.push(...newArray);\n    },\n    UPDATE_SEARCH_ARRAY: (state, array) => {\n      let newArray = array.split(\" \");\n      state.currentTopic.searchArray = newArray;\n    },\n    updateField,\n  },\n};\n"]}]}
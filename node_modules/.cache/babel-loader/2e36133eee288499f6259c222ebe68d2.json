{"remainingRequest":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js!/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/topics.js","dependencies":[{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/topics.js","mtime":1648526493395},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/cache-loader/dist/cjs.js","mtime":1640582283784},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js","mtime":1640582283745},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js","mtime":1640582288508}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvZW5ncmFtL0RvY3VtZW50cy9XZWJfYXBwcy9hcC1zdHVkeS1iaXRlcy1hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvZW5ncmFtL0RvY3VtZW50cy9XZWJfYXBwcy9hcC1zdHVkeS1iaXRlcy1hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvZW5ncmFtL0RvY3VtZW50cy9XZWJfYXBwcy9hcC1zdHVkeS1iaXRlcy1hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgeyB2dWV4ZmlyZU11dGF0aW9ucywgZmlyZXN0b3JlQWN0aW9uIH0gZnJvbSAidnVleGZpcmUiOwppbXBvcnQgeyBkYiB9IGZyb20gIi4uLy4uL2ZpcmViYXNlL2RiIjsKaW1wb3J0IHsgZ2V0RmllbGQsIHVwZGF0ZUZpZWxkIH0gZnJvbSAidnVleC1tYXAtZmllbGRzIjsKaW1wb3J0IHJvdXRlciBmcm9tICIuLi8uLi9yb3V0ZXIiOwp2YXIgdG9waWNzUmVmID0gZGIuY29sbGVjdGlvbigidG9waWNzIik7CnZhciByZXNvdXJjZXNSZWYgPSBkYi5jb2xsZWN0aW9uKCJyZXNvdXJjZXMiKTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIHRvcGljczogW10sCiAgICB0b3BpY0lEOiBudWxsLAogICAgY3VycmVudFRvcGljOiB7CiAgICAgIHRpdGxlOiAiIiwKICAgICAgdGltZXNwYW46ICIiLAogICAgICBpbnRyb01EOiAiIiwKICAgICAgaW50cm9fdGh1bWJGaWxlOiAiIiwKICAgICAgaW50cm9fdGh1bWJVUkw6ICIiLAogICAgICB0b3BpY190aHVtYkZpbGU6ICIiLAogICAgICB0b3BpY190aHVtYlVSTDogIiIsCiAgICAgIGRpc2FibGVkOiB0cnVlLAogICAgICB0aW1lUGVyaW9kOiBudWxsLAogICAgICBzZWFyY2hBcnJheTogW10KICAgIH0sCiAgICB2aWRlb0lEOiBudWxsLAogICAgdmlkZW9VUkw6IG51bGwsCiAgICByZXNvdXJjZXM6IFtdLAogICAgYXJ0aWNsZXM6IFtdLAogICAgdmlkZW9zOiBbXQogIH0sCiAgZ2V0dGVyczogewogICAgYWxsVG9waWNzOiBmdW5jdGlvbiBhbGxUb3BpY3Moc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnRvcGljczsKICAgIH0sCiAgICBjdXJyZW50SWQ6IGZ1bmN0aW9uIGN1cnJlbnRJZChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUudG9waWNJRDsKICAgIH0sCiAgICBjdXJyZW50VG9waWM6IGZ1bmN0aW9uIGN1cnJlbnRUb3BpYyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuY3VycmVudFRvcGljOwogICAgfSwKICAgIGN1cnJlbnRSZXNvdXJjZXM6IGZ1bmN0aW9uIGN1cnJlbnRSZXNvdXJjZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnJlc291cmNlczsKICAgIH0sCiAgICBjdXJyZW50QXJ0aWNsZXM6IGZ1bmN0aW9uIGN1cnJlbnRBcnRpY2xlcyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuYXJ0aWNsZXM7CiAgICB9LAogICAgZ2V0RmllbGQ6IGdldEZpZWxkCiAgfSwKICBhY3Rpb25zOiB7CiAgICBiaW5kVG9waWNzOiBmaXJlc3RvcmVBY3Rpb24oZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIGJpbmRGaXJlc3RvcmVSZWYgPSBfcmVmLmJpbmRGaXJlc3RvcmVSZWY7CiAgICAgIC8vIHJldHVybiB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSBgYmluZEZpcmVzdG9yZVJlZmAKICAgICAgcmV0dXJuIGJpbmRGaXJlc3RvcmVSZWYoInRvcGljcyIsIGRiLmNvbGxlY3Rpb24oInRvcGljcyIpKTsKICAgIH0pLAogICAgLy8qIGFkZCB0b3BpYwogICAgYWRkVG9waWNGb3JtOiBmdW5jdGlvbiBhZGRUb3BpY0Zvcm0oX3JlZjIpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgc3RhdGUsIGNvbW1pdCwgZmllbGRzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjIuc3RhdGUsIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgICAgICAgICAgIGZpZWxkcyA9IHsKICAgICAgICAgICAgICAgICAgdGl0bGU6ICIiLAogICAgICAgICAgICAgICAgICBpbnRyb01EOiAiIiwKICAgICAgICAgICAgICAgICAgdGltZXNwYW46ICIiLAogICAgICAgICAgICAgICAgICBpbnRyb190aHVtYkZpbGU6ICIiLAogICAgICAgICAgICAgICAgICBpbnRyb190aHVtYlVSTDogIiIsCiAgICAgICAgICAgICAgICAgIHRvcGljX3RodW1iRmlsZTogIiIsCiAgICAgICAgICAgICAgICAgIHRvcGljX3RodW1iVVJMOiAiIiwKICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAgIHRpbWVQZXJpb2Q6IG51bGwsCiAgICAgICAgICAgICAgICAgIHNlYXJjaEFycmF5OiBbXQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgiU0VUX0NVUlJFTlRfVE9QSUMiLCBmaWVsZHMpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0ZS5jdXJyZW50VG9waWMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8qIHN1Ym1pdCBuZXcgdG9waWMKICAgIHN1Ym1pdE5ld1RvcGljOiBmdW5jdGlvbiBzdWJtaXROZXdUb3BpYyhfcmVmMykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgc3RhdGUsIGNvbW1pdCwgZGlzcGF0Y2g7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjMuc3RhdGUsIGNvbW1pdCA9IF9yZWYzLmNvbW1pdCwgZGlzcGF0Y2ggPSBfcmVmMy5kaXNwYXRjaDsKICAgICAgICAgICAgICAgIGNvbW1pdCgiU0VUX1NFQVJDSF9BUlJBWSIsIHN0YXRlLmN1cnJlbnRUb3BpYy50aXRsZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdG9waWNzUmVmLmFkZChzdGF0ZS5jdXJyZW50VG9waWMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiU3VibWl0dGVkIE5ldyBUb3BpYyIpOwogICAgICAgICAgICAgICAgICByb3V0ZXIucmVwbGFjZSh7CiAgICAgICAgICAgICAgICAgICAgcGF0aDogIi90b3BpY2xpc3QiCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhdGUuY3VycmVudFRvcGljKTsgLy8qIGNsZWFycyB0aGUgZmllbGRzCgogICAgICAgICAgICAgICAgZGlzcGF0Y2goImNsZWFyRmllbGRzIik7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vKiBmZXRjaGVzIGFsbCB0b3BpY3MgZnJvbSBmaXJlc3RvcmUKICAgIGZldGNoVG9waWNzOiBmdW5jdGlvbiBmZXRjaFRvcGljcyhfcmVmNCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgY29tbWl0LCBkb2N1bWVudHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdDsKICAgICAgICAgICAgICAgIGRvY3VtZW50cyA9IFtdOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHRvcGljc1JlZi5nZXQoKS50aGVuKGZ1bmN0aW9uIChxdWVyeVNuYXBzaG90KSB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5U25hcHNob3QuZG9jcy5tYXAoZnVuY3Rpb24gKGRvYykgewogICAgICAgICAgICAgICAgICAgIHZhciB0b3BpY0l0ZW1EYXRhID0gZG9jLmRhdGEoKTsgLy8qIGdldHMgdGhlIHVuaXF1ZSB0b3BpYyBpZCBhbmQgYXBwZW5kcyBpdCBpbiBlYWNoIHRvcGljCgogICAgICAgICAgICAgICAgICAgIC8vKiBnZXRzIHRoZSB1bmlxdWUgdG9waWMgaWQgYW5kIGFwcGVuZHMgaXQgaW4gZWFjaCB0b3BpYwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50cy5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdG9waWNJdGVtRGF0YSksIHt9LCB7CiAgICAgICAgICAgICAgICAgICAgICBpZDogZG9jLmlkCiAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICB9KTsgLy8qIHNvcnRzIHRoZSB0b3BpY3MgYWNjb3JkaW5nIHRvIGl0cyB0aW1lIHBlcmlvZAoKICAgICAgICAgICAgICAgICAgLy8qIHNvcnRzIHRoZSB0b3BpY3MgYWNjb3JkaW5nIHRvIGl0cyB0aW1lIHBlcmlvZAogICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZG9jdW1lbnRzLnJlZHVjZShmdW5jdGlvbiAociwgYSkgewogICAgICAgICAgICAgICAgICAgIHJbYS50aW1lUGVyaW9kXSA9IHJbYS50aW1lUGVyaW9kXSB8fCBbXTsKICAgICAgICAgICAgICAgICAgICByW2EudGltZVBlcmlvZF0ucHVzaChhKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICAgICAgICAgICAgfSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7CiAgICAgICAgICAgICAgICAgIGNvbW1pdCgiU0VUX1RPUElDUyIsIHJlc3VsdCk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8qIGNsZWFyIGZpZWxkcwogICAgY2xlYXJGaWVsZHM6IGZ1bmN0aW9uIGNsZWFyRmllbGRzKF9yZWY1KSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmNS5jb21taXQ7CiAgICAgIGNvbW1pdCgiU0VUX0NVUlJFTlRfVE9QSUMiLCB7CiAgICAgICAgdGl0bGU6ICIiLAogICAgICAgIGludHJvTUQ6ICIiLAogICAgICAgIHRpbWVzcGFuOiAiIiwKICAgICAgICBpbnRyb190aHVtYkZpbGU6ICIiLAogICAgICAgIGludHJvX3RodW1iVVJMOiAiIiwKICAgICAgICB0b3BpY190aHVtYkZpbGU6ICIiLAogICAgICAgIHRvcGljX3RodW1iVVJMOiAiIiwKICAgICAgICBkaXNhYmxlZDogdHJ1ZSwKICAgICAgICB0aW1lUGVyaW9kOiBudWxsLAogICAgICAgIHNlYXJjaEFycmF5OiBbXQogICAgICB9KTsKICAgIH0sCiAgICAvLyogdG9waWMgaWQgZ2V0cyBzdG9yZWQgdG8gdGhlIHN0YXRlIGFuZCB1c2VkIGluIHF1ZXJ5aW5nIHRoZSBzcGVjaWZpYyB0b3BpYwogICAgZWRpdFRvcGljOiBmdW5jdGlvbiBlZGl0VG9waWMoX3JlZjYsIHRvcGljKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBzdGF0ZSwgY29tbWl0LCBwZXJpb2QsIHRpbWVQZXJpb2QsIHRvcGljTGlzdCwgaW5kZXgsIGN1cnJlbnRUb3BpYzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmNi5zdGF0ZSwgY29tbWl0ID0gX3JlZjYuY29tbWl0OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgiU0VUX0lEIiwgdG9waWMuaWQpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAvLyogaWRlbnRpZmllcyB0aGUgdGltZSBwZXJpb2Qgb2YgdGhlIHRvcGljIGZvciBlZGl0CiAgICAgICAgICAgICAgICBwZXJpb2QgPSBPYmplY3Qua2V5cyhzdGF0ZS50b3BpY3MpLmZpbHRlcihmdW5jdGlvbiAodGltZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdGltZSA9PSB0b3BpYy50aW1lUGVyaW9kOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aW1lUGVyaW9kID0gcGFyc2VJbnQocGVyaW9kWzBdKTsgLy8qIHNldHMgdGhlIGxpc3Qgb2YgYXJyYXkgdW5kZXIgb25lIHRpbWUgcGVyaW9kCgogICAgICAgICAgICAgICAgdG9waWNMaXN0ID0gc3RhdGUudG9waWNzW3RpbWVQZXJpb2RdOwogICAgICAgICAgICAgICAgaW5kZXggPSB0b3BpY0xpc3QuZmluZEluZGV4KGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBlLmlkID09IHRvcGljLmlkOwogICAgICAgICAgICAgICAgfSk7IC8vKiBpZGVudGlmaWVzIHRoZSBjdXJyZW50IHRvcGljIGZvciBlZGl0CgogICAgICAgICAgICAgICAgY3VycmVudFRvcGljID0gdG9waWNMaXN0W2luZGV4XTsKICAgICAgICAgICAgICAgIGNvbW1pdCgiU0VUX0NVUlJFTlRfVE9QSUMiLCBjdXJyZW50VG9waWMpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyogaGFuZGxlcyBzdWJtaXQgZm9yIGVkaXQgdG9waWMKICAgIHN1Ym1pdEVkaXRUb3BpYzogZnVuY3Rpb24gc3VibWl0RWRpdFRvcGljKF9yZWY3KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgICAgIHZhciBzdGF0ZSwgY29tbWl0LCBkaXNwYXRjaDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmNy5zdGF0ZSwgY29tbWl0ID0gX3JlZjcuY29tbWl0LCBkaXNwYXRjaCA9IF9yZWY3LmRpc3BhdGNoOwogICAgICAgICAgICAgICAgY29tbWl0KCJVUERBVEVfU0VBUkNIX0FSUkFZIiwgc3RhdGUuY3VycmVudFRvcGljLnRpdGxlKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiB0b3BpY3NSZWYuZG9jKHN0YXRlLnRvcGljSUQpLnNldChzdGF0ZS5jdXJyZW50VG9waWMsIHsKICAgICAgICAgICAgICAgICAgbWVyZ2U6IHRydWUKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiU3VibWl0dGVkIEVkaXRlZCBUb3BpYyIpOyAvLyBhbGVydCgiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0b3BpYyIpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIGRpc3BhdGNoKCJjbG9zZUZvcm0iLCAiVG9waWNMaXN0IiwgIi90b3BpY2xpc3QiKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8qIGNsZWFycyB0ZXJtIGlkCiAgICBjbGVhclRvcGljSWQ6IGZ1bmN0aW9uIGNsZWFyVG9waWNJZChfcmVmOCkgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjguY29tbWl0OwogICAgICBjb21taXQoIlNFVF9JRCIsIG51bGwpOwogICAgfSwKICAgIC8vKiBoYW5kbGVzIHRoZSBjbG9zZSBidXR0b24gb2YgYSBmb3JtCiAgICBjbG9zZUZvcm06IGZ1bmN0aW9uIGNsb3NlRm9ybShfcmVmOSwgbmFtZSwgcGF0aCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNigpIHsKICAgICAgICB2YXIgZGlzcGF0Y2g7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGRpc3BhdGNoID0gX3JlZjkuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goImNsZWFyVG9waWNJZCIpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICByb3V0ZXIucHVzaCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImNsb3NlZCB0b3BpYyBmb3JtIik7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vKiBnZXRzIGFsbCBhcnRpY2xlcyBmb3IgYSB0b3BpYwogICAgZmV0Y2hBcnRpY2xlczogZnVuY3Rpb24gZmV0Y2hBcnRpY2xlcyhfcmVmMTApIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgdmFyIHN0YXRlLCBjb21taXQsIGFydGljbGVzTGlzdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmMTAuc3RhdGUsIGNvbW1pdCA9IF9yZWYxMC5jb21taXQ7CiAgICAgICAgICAgICAgICBhcnRpY2xlc0xpc3QgPSBbXTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiByZXNvdXJjZXNSZWYud2hlcmUoInRvcGljSUQiLCAiYXJyYXktY29udGFpbnMtYW55IiwgW3N0YXRlLnRvcGljSURdKS53aGVyZSgicGFyZW50VHlwZSIsICI9PSIsICJ0b3BpYyIpLndoZXJlKCJyZXNvdXJjZVR5cGUiLCAiPT0iLCAiYXJ0aWNsZSIpLmdldCgpLnRoZW4oZnVuY3Rpb24gKHF1ZXJ5U25hcHNob3QpIHsKICAgICAgICAgICAgICAgICAgcXVlcnlTbmFwc2hvdC5kb2NzLm1hcChmdW5jdGlvbiAoZG9jKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFydGljbGVJdGVtID0gZG9jLmRhdGEoKTsgLy8qIGFwcGVuZHMgdW5pcXVlIGFydGljbGUgaWQgdG8gZWFjaCBhcnRpY2xlCgogICAgICAgICAgICAgICAgICAgIC8vKiBhcHBlbmRzIHVuaXF1ZSBhcnRpY2xlIGlkIHRvIGVhY2ggYXJ0aWNsZQogICAgICAgICAgICAgICAgICAgIGFydGljbGVzTGlzdC5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgYXJ0aWNsZUl0ZW0pLCB7fSwgewogICAgICAgICAgICAgICAgICAgICAgaWQ6IGRvYy5pZAogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIGNvbW1pdCgiU0VUX0FSVElDTEVTIiwgYXJ0aWNsZXNMaXN0KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTcpOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIG11dGF0aW9uczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2dWV4ZmlyZU11dGF0aW9ucyksIHt9LCB7CiAgICBTRVRfVE9QSUNTOiBmdW5jdGlvbiBTRVRfVE9QSUNTKHN0YXRlLCB0b3BpY3MpIHsKICAgICAgcmV0dXJuIHN0YXRlLnRvcGljcyA9IHRvcGljczsKICAgIH0sCiAgICBTRVRfSUQ6IGZ1bmN0aW9uIFNFVF9JRChzdGF0ZSwgaWQpIHsKICAgICAgcmV0dXJuIHN0YXRlLnRvcGljSUQgPSBpZDsKICAgIH0sCiAgICBTRVRfQ1VSUkVOVF9UT1BJQzogZnVuY3Rpb24gU0VUX0NVUlJFTlRfVE9QSUMoc3RhdGUsIHRvcGljKSB7CiAgICAgIHJldHVybiBzdGF0ZS5jdXJyZW50VG9waWMgPSB0b3BpYzsKICAgIH0sCiAgICBTRVRfQVJUSUNMRVM6IGZ1bmN0aW9uIFNFVF9BUlRJQ0xFUyhzdGF0ZSwgYXJ0aWNsZXMpIHsKICAgICAgcmV0dXJuIHN0YXRlLmFydGljbGVzID0gYXJ0aWNsZXM7CiAgICB9LAogICAgU0VUX1NFQVJDSF9BUlJBWTogZnVuY3Rpb24gU0VUX1NFQVJDSF9BUlJBWShzdGF0ZSwgYXJyYXkpIHsKICAgICAgdmFyIF9zdGF0ZSRjdXJyZW50VG9waWMkczsKCiAgICAgIC8vKiBzcGxpdHMgdGhlIHdvcmRzIGludG8gc3RyaW5ncyBhbmQgc3RvcmVzIGluIG5ld0FycmF5CiAgICAgIHZhciBuZXdBcnJheSA9IGFycmF5LnNwbGl0KCIgIik7CgogICAgICAoX3N0YXRlJGN1cnJlbnRUb3BpYyRzID0gc3RhdGUuY3VycmVudFRvcGljLnNlYXJjaEFycmF5KS5wdXNoLmFwcGx5KF9zdGF0ZSRjdXJyZW50VG9waWMkcywgX3RvQ29uc3VtYWJsZUFycmF5KG5ld0FycmF5KSk7CiAgICB9LAogICAgVVBEQVRFX1NFQVJDSF9BUlJBWTogZnVuY3Rpb24gVVBEQVRFX1NFQVJDSF9BUlJBWShzdGF0ZSwgYXJyYXkpIHsKICAgICAgdmFyIG5ld0FycmF5ID0gYXJyYXkuc3BsaXQoIiAiKTsKICAgICAgc3RhdGUuY3VycmVudFRvcGljLnNlYXJjaEFycmF5ID0gbmV3QXJyYXk7CiAgICB9LAogICAgdXBkYXRlRmllbGQ6IHVwZGF0ZUZpZWxkCiAgfSkKfTs="},{"version":3,"sources":["/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/topics.js"],"names":["vuexfireMutations","firestoreAction","db","getField","updateField","router","topicsRef","collection","resourcesRef","namespaced","state","topics","topicID","currentTopic","title","timespan","introMD","intro_thumbFile","intro_thumbURL","topic_thumbFile","topic_thumbURL","disabled","timePeriod","searchArray","videoID","videoURL","resources","articles","videos","getters","allTopics","currentId","currentResources","currentArticles","actions","bindTopics","bindFirestoreRef","addTopicForm","commit","fields","console","log","submitNewTopic","dispatch","add","then","replace","path","catch","err","fetchTopics","documents","get","querySnapshot","docs","map","doc","topicItemData","data","push","id","result","reduce","r","a","Object","create","clearFields","editTopic","topic","period","keys","filter","time","parseInt","topicList","index","findIndex","e","submitEditTopic","set","merge","clearTopicId","closeForm","name","fetchArticles","articlesList","where","articleItem","mutations","SET_TOPICS","SET_ID","SET_CURRENT_TOPIC","SET_ARTICLES","SET_SEARCH_ARRAY","array","newArray","split","UPDATE_SEARCH_ARRAY"],"mappings":"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","sourcesContent":["import { vuexfireMutations, firestoreAction } from \"vuexfire\";\nimport { db } from \"../../firebase/db\";\nimport { getField, updateField } from \"vuex-map-fields\";\nimport router from \"../../router\";\n\nconst topicsRef = db.collection(\"topics\");\nconst resourcesRef = db.collection(\"resources\");\n\nexport default {\n  namespaced: true,\n  state: {\n    topics: [],\n    topicID: null,\n    currentTopic: {\n      title: \"\",\n      timespan: \"\",\n      introMD: \"\",\n      intro_thumbFile: \"\",\n      intro_thumbURL: \"\",\n      topic_thumbFile: \"\",\n      topic_thumbURL: \"\",\n      disabled: true,\n      timePeriod: null,\n      searchArray: [],\n    },\n    videoID: null,\n    videoURL: null,\n    resources: [],\n    articles: [],\n    videos: [],\n  },\n\n  getters: {\n    allTopics: (state) => state.topics,\n    currentId: (state) => state.topicID,\n    currentTopic: (state) => state.currentTopic,\n    currentResources: (state) => state.resources,\n    currentArticles: (state) => state.articles,\n    getField,\n  },\n\n  actions: {\n    bindTopics: firestoreAction(({ bindFirestoreRef }) => {\n      // return the promise returned by `bindFirestoreRef`\n      return bindFirestoreRef(\"topics\", db.collection(\"topics\"));\n    }),\n\n    //* add topic\n    async addTopicForm({ state, commit }) {\n      const fields = {\n        title: \"\",\n        introMD: \"\",\n        timespan: \"\",\n        intro_thumbFile: \"\",\n        intro_thumbURL: \"\",\n        topic_thumbFile: \"\",\n        topic_thumbURL: \"\",\n        disabled: true,\n        timePeriod: null,\n        searchArray: [],\n      };\n      await commit(\"SET_CURRENT_TOPIC\", fields);\n      console.log(state.currentTopic);\n    },\n\n    //* submit new topic\n    async submitNewTopic({ state, commit, dispatch }) {\n      commit(\"SET_SEARCH_ARRAY\", state.currentTopic.title);\n\n      await topicsRef\n        .add(state.currentTopic)\n        .then(() => {\n          console.log(\"Submitted New Topic\");\n          router.replace({ path: \"/topiclist\" });\n        })\n        .catch((err) => {\n          console.log(err);\n          return false;\n        });\n      console.log(state.currentTopic);\n\n      //* clears the fields\n      dispatch(\"clearFields\");\n    },\n\n    //* fetches all topics from firestore\n    async fetchTopics({ commit }) {\n      let documents = [];\n      await topicsRef.get().then((querySnapshot) => {\n        querySnapshot.docs.map((doc) => {\n          let topicItemData = doc.data();\n          //* gets the unique topic id and appends it in each topic\n          documents.push({\n            ...topicItemData,\n            id: doc.id,\n          });\n        });\n        //* sorts the topics according to its time period\n        const result = documents.reduce(function(r, a) {\n          r[a.timePeriod] = r[a.timePeriod] || [];\n          r[a.timePeriod].push(a);\n          return r;\n        }, Object.create(null));\n        commit(\"SET_TOPICS\", result);\n      });\n    },\n\n    //* clear fields\n    clearFields({ commit }) {\n      commit(\"SET_CURRENT_TOPIC\", {\n        title: \"\",\n        introMD: \"\",\n        timespan: \"\",\n        intro_thumbFile: \"\",\n        intro_thumbURL: \"\",\n        topic_thumbFile: \"\",\n        topic_thumbURL: \"\",\n        disabled: true,\n        timePeriod: null,\n        searchArray: [],\n      });\n    },\n\n    //* topic id gets stored to the state and used in querying the specific topic\n    async editTopic({ state, commit }, topic) {\n      await commit(\"SET_ID\", topic.id);\n      //* identifies the time period of the topic for edit\n      let period = Object.keys(state.topics).filter(\n        (time) => time == topic.timePeriod\n      );\n      let timePeriod = parseInt(period[0]);\n\n      //* sets the list of array under one time period\n      let topicList = state.topics[timePeriod];\n      let index = topicList.findIndex((e) => e.id == topic.id);\n\n      //* identifies the current topic for edit\n      let currentTopic = topicList[index];\n      commit(\"SET_CURRENT_TOPIC\", currentTopic);\n    },\n\n    //* handles submit for edit topic\n    async submitEditTopic({ state, commit, dispatch }) {\n      commit(\"UPDATE_SEARCH_ARRAY\", state.currentTopic.title);\n      await topicsRef\n        .doc(state.topicID)\n        .set(state.currentTopic, { merge: true })\n        .then(() => {\n          console.log(\"Submitted Edited Topic\");\n          // alert(\"Successfully edited topic\");\n        });\n      dispatch(\"closeForm\", \"TopicList\", \"/topiclist\");\n    },\n\n    //* clears term id\n    clearTopicId({ commit }) {\n      commit(\"SET_ID\", null);\n    },\n\n    //* handles the close button of a form\n    async closeForm({ dispatch }, name, path) {\n      await dispatch(\"clearTopicId\");\n      router.push({ name: name, path: path });\n      console.log(\"closed topic form\");\n    },\n\n    //* gets all articles for a topic\n    async fetchArticles({ state, commit }) {\n      let articlesList = [];\n\n      await resourcesRef\n        .where(\"topicID\", \"array-contains-any\", [state.topicID])\n        .where(\"parentType\", \"==\", \"topic\")\n        .where(\"resourceType\", \"==\", \"article\")\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            let articleItem = doc.data();\n\n            //* appends unique article id to each article\n            articlesList.push({\n              ...articleItem,\n              id: doc.id,\n            });\n          });\n          commit(\"SET_ARTICLES\", articlesList);\n        });\n    },\n  },\n\n  mutations: {\n    ...vuexfireMutations,\n    SET_TOPICS: (state, topics) => (state.topics = topics),\n    SET_ID: (state, id) => (state.topicID = id),\n    SET_CURRENT_TOPIC: (state, topic) => (state.currentTopic = topic),\n    SET_ARTICLES: (state, articles) => (state.articles = articles),\n    SET_SEARCH_ARRAY: (state, array) => {\n      //* splits the words into strings and stores in newArray\n      let newArray = array.split(\" \");\n      state.currentTopic.searchArray.push(...newArray);\n    },\n    UPDATE_SEARCH_ARRAY: (state, array) => {\n      let newArray = array.split(\" \");\n      state.currentTopic.searchArray = newArray;\n    },\n    updateField,\n  },\n};\n"]}]}
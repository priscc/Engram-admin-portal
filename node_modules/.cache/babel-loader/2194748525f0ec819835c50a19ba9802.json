{"remainingRequest":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js!/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/events.js","dependencies":[{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/events.js","mtime":1642655312818},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/cache-loader/dist/cjs.js","mtime":1640582283784},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js","mtime":1640582283745},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js","mtime":1640582288508}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/events.js"],"names":["vuexfireMutations","firestoreAction","getField","updateField","db","router","eventsRef","collection","namespaced","state","topicId","events","eventId","currentEvent","title","startDate","date","era","endDate","descriptionMD","mainMD","thumbURL","thumbFile","imageData","theme","searchArray","topicID","coordinates","eventVideos","eventArticles","getters","currentTopicEvents","currentEventId","currentEventVideos","currentEventArticles","actions","bindEvents","bindFirestoreRef","where","setEventTopicId","rootState","commit","console","log","topics","fetchEventsHandler","dispatch","fetchEventsList","eventsList","get","then","querySnapshot","docs","map","doc","eventItem","data","push","id","addEventForm","fields","name","path","submitNewEvent","add","docRef","root","submitEditEvent","set","merge","clearEventId","closeForm","editEvent","event","index","findIndex","e","deleteEvent","delete","handleSave","mutations","SET_TOPIC_ID","SET_TOPIC_EVENTS","SET_EVENT_ID","SET_EVENT_TOPIC_ID","SET_EVENT_VIDEOS","videos","SET_EVENT_ARTICLES","articles","SET_CURRENT_EVENT","CLEAR_EVENT_ID","SET_SEARCH_ARRAY","array","newArray","split","UPDATE_SEARCH_ARRAY"],"mappings":"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","sourcesContent":["import { vuexfireMutations, firestoreAction } from \"vuexfire\";\nimport { getField, updateField } from \"vuex-map-fields\";\nimport { db } from \"../../firebase/db\";\nimport router from \"../../router\";\n\nconst eventsRef = db.collection(\"events\");\n\nexport default {\n  namespaced: true,\n  state: {\n    topicId: null,\n    events: [],\n    eventId: null,\n    currentEvent: {\n      title: \"\",\n      startDate: {\n        date: \"\",\n        era: true,\n      },\n      endDate: {\n        date: \"\",\n        era: true,\n      },\n      descriptionMD: \"\",\n      mainMD: \"\",\n      thumbURL: \"\",\n      thumbFile: \"\",\n      imageData: \"\",\n      theme: [],\n      searchArray: [],\n      topicID: [],\n      coordinates: {},\n    },\n    eventVideos: [],\n    eventArticles: [],\n  },\n\n  getters: {\n    // currentTopicContents: (state) => state.id,\n    currentTopicEvents: (state) => state.events,\n    currentEvent: (state) => state.currentEvent,\n    currentEventId: (state) => state.eventId,\n    currentEventVideos: (state) => state.eventVideos,\n    currentEventArticles: (state) => state.eventArticles,\n    getField,\n  },\n\n  actions: {\n    bindEvents: firestoreAction(({ bindFirestoreRef, state }) => {\n      // return the promise returned by `bindFirestoreRef`\n      return bindFirestoreRef(\n        \"events\",\n        db\n          .collection(\"events\")\n          .where(\"topicID\", \"array-contains-any\", [state.topicId])\n      );\n    }),\n\n    //* set topicId to track current topic contents\n    setEventTopicId({ rootState, state, commit }) {\n      console.log(rootState.topics.topicID);\n      commit(\"SET_EVENT_TOPIC_ID\", rootState.topics.topicID);\n      console.log(\"set event topicid\", state.currentEvent.topicID);\n    },\n\n    //* fetch all events under current topic id\n    async fetchEventsHandler({ commit, rootState, dispatch }) {\n      await commit(\"SET_TOPIC_ID\", rootState.topics.topicID);\n      await dispatch(\"fetchEventsList\");\n    },\n\n    //* fetches the list of all events under one topic\n    async fetchEventsList({ commit, rootState }) {\n      let eventsList = [];\n      await eventsRef\n        .where(\"topicID\", \"array-contains-any\", [rootState.topics.topicID])\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            let eventItem = doc.data();\n            //* appends unique event id to each event\n            //* appends coordinates field if event does not yet have it\n            if (eventItem.coordinates == null) {\n              eventsList.push({\n                ...eventItem,\n                id: doc.id,\n                coordinates: {},\n              });\n            } else {\n              eventsList.push({\n                ...eventItem,\n                id: doc.id,\n              });\n            }\n          });\n          commit(\"SET_TOPIC_EVENTS\", eventsList);\n        });\n      console.log(\"Topic Events:\", eventsList);\n    },\n\n    //* handler for add event button, clears the fields\n    async addEventForm({ state, dispatch, commit }) {\n      const fields = {\n        title: \"\",\n        startDate: {\n          date: \"\",\n          era: true,\n        },\n        endDate: {\n          date: \"\",\n          era: true,\n        },\n        descriptionMD: \"\",\n        mainMD: \"\",\n        thumbURL: \"\",\n        thumbFile: \"\",\n        imageData: \"\",\n        theme: [],\n        searchArray: [],\n        topicID: [],\n        coordinates: {},\n      };\n      await commit(\"SET_CURRENT_EVENT\", fields);\n      await dispatch(\"clearEventId\");\n      router.push({ name: \"EventGeneral\", path: \"/events/general\" });\n      console.log(\"Triggered adding event, eventID:\", state.eventId);\n    },\n\n    //* handles submit new event data\n    async submitNewEvent({ state, dispatch, rootState, commit }) {\n      await dispatch(\"setEventTopicId\");\n      await commit(\"SET_SEARCH_ARRAY\", state.currentEvent.title);\n      console.log(\"6) submitting new event\", state.currentEvent);\n      await eventsRef.add(state.currentEvent).then(function(docRef) {\n        console.log(\"7) new Event id: \", docRef.id);\n        commit(\"articles/UPDATE_ARTICLES_ID\", docRef.id, { root: true });\n        dispatch(\"articles/addArticleToDB\", null, { root: true });\n      });\n      dispatch(\"closeForm\", \"Events\", \"/events\");\n      console.log(\"adding new event, topic id:\", rootState.topics.topicID);\n    },\n    //* handles submit for edit event\n    async submitEditEvent({ state, dispatch, commit }) {\n      await commit(\"UPDATE_SEARCH_ARRAY\", state.currentEvent.title);\n\n      await eventsRef\n        .doc(state.eventId)\n        .set(state.currentEvent, { merge: true })\n        .then(() => {\n          console.log(\"6) Submit Edited event\" + state.currentEvent);\n        });\n      dispatch(\"closeForm\", \"Events\", \"/events\");\n    },\n    //* clears the current eventId\n    clearEventId({ commit }) {\n      commit(\"CLEAR_EVENT_ID\", null);\n    },\n\n    //* handles the close button of a form\n    async closeForm({ state, dispatch }, name, path) {\n      await dispatch(\"clearEventId\");\n      router.push({ name: name, path: path });\n      console.log(\"closed event form - should be null\", state.eventId);\n    },\n\n    //* set current event for edit\n    async editEvent({ state, commit }, event) {\n      await commit(\"SET_EVENT_ID\", event.id);\n\n      //* sets the index of the event for edit\n      let index = state.events.findIndex((e) => e.id == event.id);\n\n      //* identifies the current event for edit\n      let currentEvent = state.events[index];\n\n      await commit(\"SET_CURRENT_EVENT\", currentEvent);\n      // await dispatch(\"getEvent\");\n    },\n\n    //* deletes the event from the database\n    async deleteEvent({ commit, state, dispatch }, event) {\n      await commit(\"SET_EVENT_ID\", event.id);\n      eventsRef\n        .doc(state.eventId)\n        .delete()\n        .then(() => {\n          console.log(\"Deleted Event\");\n        });\n      dispatch(\"fetchEventsList\");\n    },\n\n    //* dynamic save button\n    handleSave({ state, dispatch }) {\n      if (state.eventId != null) {\n        //* handles the submit as an edit if editing an event\n        dispatch(\"submitEditEvent\");\n      } else {\n        //* handles the submit as a new event if adding an event\n        dispatch(\"submitNewEvent\");\n      }\n    },\n  },\n\n  mutations: {\n    ...vuexfireMutations,\n    // setId: (state, id) => (state.id = id),\n    SET_TOPIC_ID: (state, topicId) => (state.topicId = topicId),\n    SET_TOPIC_EVENTS: (state, events) => (state.events = events),\n    SET_EVENT_ID: (state, eventId) => (state.eventId = eventId),\n    SET_EVENT_TOPIC_ID: (state, topicId) => {\n      state.currentEvent.topicID.push(topicId);\n    },\n    SET_EVENT_VIDEOS: (state, videos) => (state.eventVideos = videos),\n    SET_EVENT_ARTICLES: (state, articles) => (state.eventArticles = articles),\n    SET_CURRENT_EVENT: (state, event) => (state.currentEvent = event),\n    CLEAR_EVENT_ID: (state, id) => (state.eventId = id),\n    SET_SEARCH_ARRAY: (state, array) => {\n      //* splits the words into strings and stores in newArray\n      let newArray = array.split(\" \");\n      state.currentEvent.searchArray.push(...newArray);\n    },\n    UPDATE_SEARCH_ARRAY: (state, array) => {\n      let newArray = array.split(\" \");\n      state.currentEvent.searchArray = newArray;\n    },\n    // SET_NEW_EVENT: (state, currentEvent) =>\n    updateField,\n  },\n};\n"]}]}
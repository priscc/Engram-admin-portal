{"remainingRequest":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/babel-loader/lib/index.js!/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/eslint-loader/index.js??ref--13-0!/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/src/store/modules/people.js","dependencies":[{"path":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/src/store/modules/people.js","mtime":1619034450851},{"path":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/cache-loader/dist/cjs.js","mtime":1618023230646},{"path":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/babel-loader/lib/index.js","mtime":1618023230532},{"path":"/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/node_modules/eslint-loader/index.js","mtime":1618023254343}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/priscilla_cancar/Documents/VueProjects/StudyBites/studybites_AdminPortal/src/store/modules/people.js"],"names":["vuexfireMutations","getField","updateField","db","peopleRef","collection","namespaced","state","people","personId","currentPerson","name","mainMD","thumbFile","thumbURL","dateOfBirth","date","era","dateOfPassing","topicID","searchArray","getters","currentTopicPeople","currentPersonId","actions","fetchPeople","rootState","commit","peopleList","where","topics","get","then","querySnapshot","docs","map","doc","peopleItem","data","push","id","console","log","setPersonForm","fields","clearPersonId","submitNewPerson","dispatch","add","setPersonTopicId","editPerson","person","index","findIndex","e","submitEditPerson","set","merge","deletePerson","delete","setTimeout","handleSave","mutations","SET_TOPIC_PEOPLE","SET_CURRENT_PERSON","CLEAR_PERSON_ID","SET_PERSON_TOPIC_ID","SET_PERSON_ID","SET_SEARCH_ARRAY","array","newArray","split","UPDATE_SEARCH_ARRAY"],"mappings":"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","sourcesContent":["import { vuexfireMutations } from \"vuexfire\";\nimport { getField, updateField } from \"vuex-map-fields\";\nimport { db } from \"../../firebase/db\";\n\nconst peopleRef = db.collection(\"people\");\n\nexport default {\n  namespaced: true,\n\n  state: {\n    people: [],\n    personId: null,\n    currentPerson: {\n      name: \"\",\n      mainMD: \"\",\n      thumbFile: \"\",\n      thumbURL: \"\",\n      dateOfBirth: {\n        date: \"\",\n        era: true,\n      },\n      dateOfPassing: {\n        date: \"\",\n        era: true,\n      },\n      topicID: [],\n      searchArray: [],\n    },\n  },\n\n  getters: {\n    getField,\n    currentTopicPeople: (state) => state.people,\n    currentPersonId: (state) => state.personId,\n    currentPerson: (state) => state.currentPerson,\n  },\n\n  actions: {\n    //* fetches the list of hist people under current topic\n    async fetchPeople({ rootState, commit, state }) {\n      let peopleList = [];\n      await peopleRef\n        .where(\"topicID\", \"array-contains-any\", [rootState.topics.topicID])\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            let peopleItem = doc.data();\n\n            //* appends unique event id to each event\n            peopleList.push({\n              ...peopleItem,\n              id: doc.id,\n            });\n          });\n\n          commit(\"SET_TOPIC_PEOPLE\", peopleList);\n          console.log(state.people);\n          console.log(rootState.topics.topicID);\n        });\n    },\n\n    //* handler for add historical person\n    async setPersonForm({ commit, state }) {\n      const fields = {\n        name: \"\",\n        mainMD: \"\",\n        thumbFile: \"\",\n        thumbURL: \"\",\n        dateOfBirth: {\n          date: \"\",\n          era: true,\n        },\n        dateOfPassing: {\n          date: \"\",\n          era: true,\n        },\n        topicID: [],\n        searchArray: [],\n      };\n      // await dispatch('clearPersonId')\n      await commit(\"SET_CURRENT_PERSON\", fields);\n      console.log(state.personId);\n    },\n\n    //* clears the current person id\n    async clearPersonId({ commit }) {\n      await commit(\"CLEAR_PERSON_ID\", null);\n    },\n\n    //* handles submit new person data\n    async submitNewPerson({ dispatch, state, commit }) {\n      await dispatch(\"setPersonTopicId\");\n      await commit(\"SET_SEARCH_ARRAY\", state.currentPerson.name);\n\n      await peopleRef.add(state.currentPerson).then(() => {\n        console.log(\"state\", state);\n        console.log(\"Person Added\");\n      });\n    },\n\n    //* sets the topic id for the current person\n    setPersonTopicId({ rootState, state, commit }) {\n      commit(\"SET_PERSON_TOPIC_ID\", rootState.topics.topicID);\n      console.log(state.currentPerson.topicID);\n    },\n\n    //* sets current event for edit\n    async editPerson({ state, commit, dispatch }, person) {\n      await commit(\"SET_PERSON_ID\", person.id);\n      console.log(state.personId);\n\n      //* sets the index of the person for edit\n      let index = state.people.findIndex((e) => e.id == person.id);\n\n      //* identifies the current person for edit\n      let currentPerson = state.people[index];\n\n      commit(\"SET_CURRENT_PERSON\", currentPerson);\n      console.log(state.currentPerson);\n\n      await dispatch(\"fetchPersonResources\");\n    },\n\n    //* handles submit for edit person\n    async submitEditPerson({ state, commit }) {\n      await commit(\"UPDATE_SEARCH_ARRAY\", state.currentPerson.name);\n      await peopleRef\n        .doc(state.personId)\n        .set(state.currentPerson, { merge: true })\n        .then(() => {\n          console.log(\"Submit Edit for \" + state.currentPerson.name);\n        });\n    },\n\n    //* deletes person from the database\n    async deletePerson({ commit, state, dispatch }, person) {\n      await commit(\"SET_PERSON_ID\", person.id);\n      peopleRef\n        .doc(state.personId)\n        .delete()\n        .then(() => {\n          console.log(\"Successfully deleted\");\n        });\n      setTimeout(() => dispatch(\"fetchPeople\"), 200);\n    },\n\n    //* dynamic save button\n    handleSave({ state, dispatch }) {\n      if (state.personId != null) {\n        //* handles the submit as an edit if editing a person\n        dispatch(\"submitEditPerson\");\n      } else {\n        //* handles the submit as a new event if adding a person\n        dispatch(\"submitNewPerson\");\n      }\n    },\n  },\n\n  mutations: {\n    ...vuexfireMutations,\n    updateField,\n    SET_TOPIC_PEOPLE: (state, people) => (state.people = people),\n    SET_CURRENT_PERSON: (state, person) => (state.currentPerson = person),\n    CLEAR_PERSON_ID: (state, id) => (state.personId = id),\n    SET_PERSON_TOPIC_ID: (state, topicID) => {\n      state.currentPerson.topicID.push(topicID);\n    },\n    SET_PERSON_ID: (state, personId) => (state.personId = personId),\n    SET_SEARCH_ARRAY: (state, array) => {\n      //* splits the words into strings and stores in newArray\n      let newArray = array.split(\" \");\n      state.currentPerson.searchArray.push(...newArray);\n    },\n    UPDATE_SEARCH_ARRAY: (state, array) => {\n      let newArray = array.split(\" \");\n      state.currentPerson.searchArray = newArray;\n    },\n  },\n};\n"]}]}
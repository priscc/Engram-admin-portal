{"remainingRequest":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js!/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/topics.js","dependencies":[{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/topics.js","mtime":1639249961190},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/cache-loader/dist/cjs.js","mtime":1640582283784},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js","mtime":1640582283745},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js","mtime":1640582288508}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/topics.js"],"names":["vuexfireMutations","firestoreAction","db","getField","updateField","router","topicsRef","collection","resourcesRef","namespaced","state","topics","topicID","currentTopic","title","introMD","intro_thumbFile","intro_thumbURL","topic_thumbFile","topic_thumbURL","disabled","timePeriod","searchArray","videoID","videoURL","resources","articles","videos","getters","allTopics","currentId","currentResources","currentArticles","actions","bindTopics","bindFirestoreRef","addTopicForm","commit","fields","console","log","submitNewTopic","add","then","replace","path","catch","err","fetchTopics","documents","get","querySnapshot","docs","map","doc","topicItemData","data","push","id","result","reduce","r","a","Object","create","editTopic","topic","period","keys","filter","time","parseInt","topicList","index","findIndex","e","submitEditTopic","set","merge","alert","fetchArticles","articlesList","where","articleItem","mutations","SET_TOPICS","SET_ID","SET_CURRENT_TOPIC","SET_ARTICLES","SET_SEARCH_ARRAY","array","newArray","split","UPDATE_SEARCH_ARRAY"],"mappings":"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","sourcesContent":["import { vuexfireMutations, firestoreAction } from \"vuexfire\";\nimport { db } from \"../../firebase/db\";\nimport { getField, updateField } from \"vuex-map-fields\";\nimport router from \"../../router\";\n\nconst topicsRef = db.collection(\"topics\");\nconst resourcesRef = db.collection(\"resources\");\n\nexport default {\n  namespaced: true,\n  state: {\n    topics: [],\n    topicID: null,\n    currentTopic: {\n      title: \"\",\n      introMD: \"\",\n      intro_thumbFile: \"\",\n      intro_thumbURL: \"\",\n      topic_thumbFile: \"\",\n      topic_thumbURL: \"\",\n      disabled: true,\n      timePeriod: null,\n      searchArray: [],\n    },\n    videoID: null,\n    videoURL: null,\n    resources: [],\n    articles: [],\n    videos: [],\n  },\n\n  getters: {\n    allTopics: (state) => state.topics,\n    currentId: (state) => state.topicID,\n    currentTopic: (state) => state.currentTopic,\n    currentResources: (state) => state.resources,\n    currentArticles: (state) => state.articles,\n    getField,\n  },\n\n  actions: {\n    bindTopics: firestoreAction(({ bindFirestoreRef }) => {\n      // return the promise returned by `bindFirestoreRef`\n      return bindFirestoreRef(\"topics\", db.collection(\"topics\"));\n    }),\n\n    //* add topic\n    async addTopicForm({ state, commit }) {\n      const fields = {\n        title: \"\",\n        introMD: \"\",\n        intro_thumbFile: \"\",\n        intro_thumbURL: \"\",\n        topic_thumbFile: \"\",\n        topic_thumbURL: \"\",\n        disabled: true,\n        timePeriod: null,\n        searchArray: [],\n      };\n      await commit(\"SET_CURRENT_TOPIC\", fields);\n      console.log(state.currentTopic);\n    },\n\n    //* submit new topic\n    async submitNewTopic({ state, commit }) {\n      commit(\"SET_SEARCH_ARRAY\", state.currentTopic.title);\n\n      await topicsRef\n        .add(state.currentTopic)\n        .then(() => {\n          console.log(\"Submitted New Topic\");\n          router.replace({ path: \"/addcontent\" });\n        })\n        .catch((err) => {\n          console.log(err);\n          return false;\n        });\n      console.log(state.currentTopic);\n    },\n\n    //* fetches all topics from firestore\n    async fetchTopics({ commit }) {\n      let documents = [];\n      await topicsRef.get().then((querySnapshot) => {\n        querySnapshot.docs.map((doc) => {\n          let topicItemData = doc.data();\n          //* gets the unique topic id and appends it in each topic\n          documents.push({\n            ...topicItemData,\n            id: doc.id,\n          });\n        });\n        //* sorts the topics according to its time period\n        const result = documents.reduce(function(r, a) {\n          r[a.timePeriod] = r[a.timePeriod] || [];\n          r[a.timePeriod].push(a);\n          return r;\n        }, Object.create(null));\n        commit(\"SET_TOPICS\", result);\n      });\n    },\n\n    //* topic id gets stored to the state and used in querying the specific topic\n    async editTopic({ state, commit }, topic) {\n      await commit(\"SET_ID\", topic.id);\n      //* identifies the time period of the topic for edit\n      let period = Object.keys(state.topics).filter(\n        (time) => time == topic.timePeriod\n      );\n      let timePeriod = parseInt(period[0]);\n\n      //* sets the list of array under one time period\n      let topicList = state.topics[timePeriod];\n      let index = topicList.findIndex((e) => e.id == topic.id);\n\n      //* identifies the current topic for edit\n      let currentTopic = topicList[index];\n      commit(\"SET_CURRENT_TOPIC\", currentTopic);\n    },\n\n    //* handles submit for edit topic\n    async submitEditTopic({ state, commit }) {\n      commit(\"UPDATE_SEARCH_ARRAY\", state.currentTopic.title);\n      await topicsRef\n        .doc(state.topicID)\n        .set(state.currentTopic, { merge: true })\n        .then(() => {\n          console.log(\"Submitted Edited Topic\");\n          alert(\"Successfully edited topic\");\n        });\n    },\n\n    //* gets all articles for a topic\n    async fetchArticles({ state, commit }) {\n      let articlesList = [];\n\n      await resourcesRef\n        .where(\"topicID\", \"array-contains-any\", [state.topicID])\n        .where(\"parentType\", \"==\", \"topic\")\n        .where(\"resourceType\", \"==\", \"article\")\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            let articleItem = doc.data();\n\n            //* appends unique article id to each article\n            articlesList.push({\n              ...articleItem,\n              id: doc.id,\n            });\n          });\n          commit(\"SET_ARTICLES\", articlesList);\n        });\n    },\n  },\n\n  mutations: {\n    ...vuexfireMutations,\n    SET_TOPICS: (state, topics) => (state.topics = topics),\n    SET_ID: (state, id) => (state.topicID = id),\n    SET_CURRENT_TOPIC: (state, topic) => (state.currentTopic = topic),\n    SET_ARTICLES: (state, articles) => (state.articles = articles),\n    SET_SEARCH_ARRAY: (state, array) => {\n      //* splits the words into strings and stores in newArray\n      let newArray = array.split(\" \");\n      state.currentTopic.searchArray.push(...newArray);\n    },\n    UPDATE_SEARCH_ARRAY: (state, array) => {\n      let newArray = array.split(\" \");\n      state.currentTopic.searchArray = newArray;\n    },\n    updateField,\n  },\n};\n"]}]}
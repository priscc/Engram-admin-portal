{"remainingRequest":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js!/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/people.js","dependencies":[{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/people.js","mtime":1642802441941},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/cache-loader/dist/cjs.js","mtime":1640582283784},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js","mtime":1640582283745},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js","mtime":1640582288508}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/people.js"],"names":["vuexfireMutations","getField","updateField","db","router","peopleRef","collection","namespaced","state","people","personId","currentPerson","name","mainMD","thumbFile","thumbURL","dateOfBirth","date","era","dateOfPassing","topicID","searchArray","getters","currentTopicPeople","currentPersonId","actions","setPersonTopicId","rootState","commit","topics","console","log","fetchPeople","peopleList","where","get","then","querySnapshot","docs","map","doc","peopleItem","data","push","id","addPersonForm","dispatch","fields","path","submitNewPerson","add","docRef","root","submitEditPerson","set","merge","clearPersonId","closeForm","eventId","editPerson","person","index","findIndex","e","deletePerson","delete","setTimeout","handleSave","mutations","SET_TOPIC_PEOPLE","SET_CURRENT_PERSON","CLEAR_PERSON_ID","SET_PERSON_TOPIC_ID","SET_PERSON_ID","SET_SEARCH_ARRAY","array","newArray","split","UPDATE_SEARCH_ARRAY"],"mappings":"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","sourcesContent":["import { vuexfireMutations } from \"vuexfire\";\nimport { getField, updateField } from \"vuex-map-fields\";\nimport { db } from \"../../firebase/db\";\nimport router from \"../../router\";\n\nconst peopleRef = db.collection(\"people\");\n\nexport default {\n  namespaced: true,\n\n  state: {\n    people: [],\n    personId: null,\n    currentPerson: {\n      name: \"\",\n      mainMD: \"\",\n      thumbFile: \"\",\n      thumbURL: \"\",\n      dateOfBirth: {\n        date: \"\",\n        era: true,\n      },\n      dateOfPassing: {\n        date: \"\",\n        era: true,\n      },\n      topicID: [],\n      searchArray: [],\n    },\n  },\n\n  getters: {\n    getField,\n    currentTopicPeople: (state) => state.people,\n    currentPersonId: (state) => state.personId,\n    currentPerson: (state) => state.currentPerson,\n  },\n\n  actions: {\n    //* sets the topic id for the current person\n    setPersonTopicId({ rootState, state, commit }) {\n      commit(\"SET_PERSON_TOPIC_ID\", rootState.topics.topicID);\n      console.log(\"set event topicid\", state.currentPerson.topicID);\n    },\n\n    //* fetches the list of hist people under current topic\n    async fetchPeople({ rootState, commit }) {\n      let peopleList = [];\n      await peopleRef\n        .where(\"topicID\", \"array-contains-any\", [rootState.topics.topicID])\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            let peopleItem = doc.data();\n\n            //* appends unique event id to each event\n            peopleList.push({\n              ...peopleItem,\n              id: doc.id,\n            });\n          });\n\n          commit(\"SET_TOPIC_PEOPLE\", peopleList);\n        });\n      console.log(\"Topic Figures:\", peopleList);\n    },\n\n    //* handler for add historical person\n    async addPersonForm({ state, dispatch, commit }) {\n      const fields = {\n        name: \"\",\n        mainMD: \"\",\n        thumbFile: \"\",\n        thumbURL: \"\",\n        dateOfBirth: {\n          date: \"\",\n          era: true,\n        },\n        dateOfPassing: {\n          date: \"\",\n          era: true,\n        },\n        topicID: [],\n        searchArray: [],\n      };\n      // await dispatch('clearPersonId')\n      await commit(\"SET_CURRENT_PERSON\", fields);\n      await dispatch(\"clearPersonId\");\n      router.push({\n        name: \"HistPeopleGeneral\",\n        path: \"/historicalpeople/general\",\n      });\n      console.log(\"Triggered adding person, personId:\", state.personId);\n    },\n\n    //* handles submit new person data\n    async submitNewPerson({ state, dispatch, commit }) {\n      await dispatch(\"setPersonTopicId\");\n      await commit(\"SET_SEARCH_ARRAY\", state.currentPerson.name);\n      console.log(\"6) submitting new event\", state.currentPerson);\n      await peopleRef.add(state.currentPerson).then(function(docRef) {\n        console.log(\"7) new Event id: \", docRef.id);\n        commit(\"articles/UPDATE_ARTICLES_ID\", docRef.id, { root: true });\n        dispatch(\"articles/addArticleToDB\", null, { root: true });\n        commit(\"videos/UPDATE_VIDEOS_ID\", docRef.id, { root: true });\n        dispatch(\"videos/addVideoToDB\", null, { root: true });\n      });\n      dispatch(\"closeForm\", \"HistoricalPeople\", \"/historicalpeople\");\n    },\n\n    //* handles submit for edit person\n    async submitEditPerson({ state, dispatch, commit }) {\n      await commit(\"UPDATE_SEARCH_ARRAY\", state.currentPerson.name);\n      await peopleRef\n        .doc(state.personId)\n        .set(state.currentPerson, { merge: true })\n        .then(() => {\n          console.log(\"Submit Edit for \" + state.currentPerson.name);\n        });\n      dispatch(\"closeForm\", \"HistoricalPeople\", \"/historicalpeople\");\n    },\n\n    //* clears the current person id\n    async clearPersonId({ commit }) {\n      await commit(\"CLEAR_PERSON_ID\", null);\n    },\n\n    //* handles the close button of a form\n    async closeForm({ state, dispatch }, name, path) {\n      await dispatch(\"clearPersonId\");\n      router.push({ name: name, path: path });\n      console.log(\"closed figure form - should be null\", state.eventId);\n    },\n\n    //* sets current event for edit\n    async editPerson({ state, commit }, person) {\n      await commit(\"SET_PERSON_ID\", person.id);\n\n      //* sets the index of the person for edit\n      let index = state.people.findIndex((e) => e.id == person.id);\n\n      //* identifies the current person for edit\n      let currentPerson = state.people[index];\n\n      commit(\"SET_CURRENT_PERSON\", currentPerson);\n\n      // await dispatch(\"fetchPersonResources\");\n    },\n\n    //* deletes person from the database\n    async deletePerson({ commit, state, dispatch }, person) {\n      await commit(\"SET_PERSON_ID\", person.id);\n      peopleRef\n        .doc(state.personId)\n        .delete()\n        .then(() => {\n          console.log(\"Successfully deleted\");\n        });\n      setTimeout(() => dispatch(\"fetchPeople\"), 200);\n    },\n\n    //* dynamic save button\n    handleSave({ state, dispatch }) {\n      if (state.personId != null) {\n        //* handles the submit as an edit if editing a person\n        dispatch(\"submitEditPerson\");\n      } else {\n        //* handles the submit as a new event if adding a person\n        dispatch(\"submitNewPerson\");\n      }\n    },\n  },\n\n  mutations: {\n    ...vuexfireMutations,\n    updateField,\n    SET_TOPIC_PEOPLE: (state, people) => (state.people = people),\n    SET_CURRENT_PERSON: (state, person) => (state.currentPerson = person),\n    CLEAR_PERSON_ID: (state, id) => (state.personId = id),\n    SET_PERSON_TOPIC_ID: (state, topicID) => {\n      state.currentPerson.topicID.push(topicID);\n    },\n    SET_PERSON_ID: (state, personId) => (state.personId = personId),\n    SET_SEARCH_ARRAY: (state, array) => {\n      //* splits the words into strings and stores in newArray\n      let newArray = array.split(\" \");\n      state.currentPerson.searchArray.push(...newArray);\n    },\n    UPDATE_SEARCH_ARRAY: (state, array) => {\n      let newArray = array.split(\" \");\n      state.currentPerson.searchArray = newArray;\n    },\n  },\n};\n"]}]}
{"remainingRequest":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js!/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/videos.js","dependencies":[{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/videos.js","mtime":1642801857591},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/cache-loader/dist/cjs.js","mtime":1640582283784},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/babel-loader/lib/index.js","mtime":1640582283745},{"path":"/Users/engram/Documents/Web_apps/ap-study-bites-admin/node_modules/eslint-loader/index.js","mtime":1640582288508}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/engram/Documents/Web_apps/ap-study-bites-admin/src/store/modules/videos.js"],"names":["vuexfireMutations","firestoreAction","getField","updateField","db","getIdFromURL","resourcesRef","collection","namespaced","state","videos","videoID","videoURL","contentID","currentVideoResource","parentID","parentType","resourceType","url","title","topicID","searchArray","getters","currentVideos","currentVideoURL","actions","bindTopics","bindFirestoreRef","fetchVideos","commit","rootState","videoList","where","topics","get","then","querySnapshot","docs","map","doc","videoItem","data","push","id","fetchContentVideos","readParentID","console","log","events","eventId","people","personId","articles","clearVideoForm","submitNewVideo","dispatch","add","currentArticle","addVideoToDB","length","batch","forEach","docRef","set","editVideo","video","index","findIndex","e","currentVideo","submitEditVideo","merge","deleteVideo","delete","mutations","SET_VIDEOS","SET_VIDEO_ID","SET_YOUTUBE_URL","SET_YOUTUBE_ID","SET_VIDEO_PROPS","props","SET_VIDEO_TOPIC_ID","SET_SEARCH_ARRAY","array","newArray","split","SET_CURRENT_VIDEO_RESOURCE","fields","UPDATE_SEARCH_ARRAY","UPDATE_VIDEOS","UPDATE_VIDEOS_ID"],"mappings":"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","sourcesContent":["import { vuexfireMutations, firestoreAction } from \"vuexfire\";\nimport { getField, updateField } from \"vuex-map-fields\";\nimport { db } from \"../../firebase/db\";\nimport { getIdFromURL } from \"vue-youtube-embed\";\n\nconst resourcesRef = db.collection(\"resources\");\n\nexport default {\n  namespaced: true,\n  state: {\n    videos: [],\n    videoID: null,\n    videoURL: null,\n    contentID: null,\n    currentVideoResource: {\n      parentID: \"\",\n      parentType: \"\",\n      resourceType: \"\",\n      url: \"\",\n      title: \"\",\n      topicID: [],\n      searchArray: [],\n    },\n  },\n  getters: {\n    getField,\n    currentVideos: (state) => state.videos,\n    currentVideoURL: (state) => getIdFromURL(state.videoURL),\n  },\n  actions: {\n    bindTopics: firestoreAction(({ bindFirestoreRef }) => {\n      // return the promise returned by `bindFirestoreRef`\n      return bindFirestoreRef(\"resources\", db.collection(\"resources\"));\n    }),\n\n    //* fetches all videos under topics\n    async fetchVideos({ commit, rootState }, parentType) {\n      let videoList = [];\n\n      await resourcesRef\n        .where(\"topicID\", \"array-contains-any\", [rootState.topics.topicID])\n        .where(\"parentType\", \"==\", parentType)\n        .where(\"resourceType\", \"==\", \"video\")\n        .get()\n        .then(async (querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            let videoItem = doc.data();\n\n            //* appends unique video id to each work\n            videoList.push({\n              ...videoItem,\n              id: doc.id,\n            });\n          });\n          await commit(\"SET_VIDEOS\", videoList);\n        });\n      // console.log(\"fetchVideos\", state.videos);\n    },\n\n    //* fetches all video resources under topic contents\n    async fetchContentVideos({ state, commit, rootState }, parentType) {\n      const readParentID = (parentType) => {\n        if (parentType == \"event\") {\n          console.log(\"1) eventID (video):\", rootState.events.eventId);\n          return rootState.events.eventId;\n        } else if (parentType == \"people\") {\n          console.log(\"1) personId (person):\", rootState.people.personId);\n          return rootState.people.personId;\n        }\n      };\n      let parentID = await readParentID(parentType);\n      let videos = [];\n      await resourcesRef\n        .where(\"parentID\", \"==\", parentID)\n        .where(\"parentType\", \"==\", parentType)\n        .where(\"resourceType\", \"==\", \"video\")\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.docs.map((doc) => {\n            console.log(\"2) fetching videos:\", parentID);\n            let videoItem = doc.data();\n            videos.push({\n              ...videoItem,\n              id: doc.id,\n            });\n          });\n        });\n      await commit(\"SET_VIDEOS\", videos);\n      console.log(\"3) fetched videos:\", state.articles);\n    },\n\n    //* clears video resource form\n    clearVideoForm({ commit }) {\n      commit(\"SET_CURRENT_VIDEO_RESOURCE\", {\n        parentID: \"\",\n        parentType: \"\",\n        resourceType: \"video\",\n        url: \"\",\n        title: \"\",\n        topicID: [],\n        searchArray: [],\n      });\n      commit(\"SET_YOUTUBE_ID\", \"\");\n      // console.log(state.currentVideoResource);\n    },\n\n    //* handles submit video resource\n    async submitNewVideo({ state, commit, dispatch, rootState }, parentType) {\n      let url = getIdFromURL(state.videoURL);\n      commit(\"SET_YOUTUBE_URL\", url);\n\n      //* sets parentID\n      const readParentID = (parentType) => {\n        if (parentType == \"event\") {\n          return rootState.events.eventId;\n        } else if (parentType == \"people\") {\n          return rootState.people.personId;\n        } else if (parentType == \"topic\") {\n          return rootState.topics.topicID;\n        }\n      };\n      let parentID = await readParentID(parentType);\n      commit(\"SET_VIDEO_PROPS\", {\n        parentID: parentID,\n        parentType: parentType,\n      });\n      commit(\"SET_VIDEO_TOPIC_ID\", rootState.topics.topicID);\n      commit(\"SET_SEARCH_ARRAY\", state.currentVideoResource.title);\n\n      if (parentID) {\n        console.log(\"4) video has parentID\");\n\n        //* adds new video to firestore\n        await resourcesRef.add(state.currentVideoResource).then(() => {\n          console.log(\"4) Submitted Video Resource\");\n        });\n      } else {\n        console.log(\"4) video does not have parentID\");\n      }\n      commit(\"UPDATE_VIDEOS\");\n      console.log(\"4) new video:\", state.currentArticle);\n      console.log(\"5) videos\", state.articles);\n      dispatch(\"clearVideoForm\");\n      // alert(\"Submitted Video Resource\");\n    },\n\n    async addVideoToDB({ state }) {\n      if (state.videos.length > 0) {\n        var batch = db.batch();\n        state.videos.forEach((doc) => {\n          var docRef = resourcesRef.doc(); //automatically generate unique id\n          batch.set(docRef, doc);\n        });\n        batch.commit();\n        console.log(\"9) Submitted Videos:\", state.videos);\n      }\n    },\n\n    //* sets current video for edit\n    editVideo({ commit, state }, video) {\n      commit(\"SET_VIDEO_ID\", video.id);\n\n      //* returns the index of the video for edit\n      let index = state.videos.findIndex((e) => e.id == video.id);\n\n      //* identifies the current video for edit using index\n      let currentVideo = state.videos[index];\n      commit(\"SET_CURRENT_VIDEO_RESOURCE\", currentVideo);\n      commit(\"SET_YOUTUBE_ID\", currentVideo.url);\n    },\n\n    //* submit edit video\n    async submitEditVideo({ state, dispatch, commit }) {\n      let url = getIdFromURL(state.videoURL);\n      commit(\"SET_YOUTUBE_URL\", url);\n      commit(\"UPDATE_SEARCH_ARRAY\", state.currentVideoResource.title);\n      await resourcesRef\n        .doc(state.videoID)\n        .set(state.currentVideoResource, { merge: true })\n        .then(() => {\n          console.log(\"Submit Edit for \" + state.currentVideoResource.title);\n        });\n      dispatch(\"clearVideoForm\");\n    },\n\n    //* delete video\n    async deleteVideo({ state, commit, dispatch }, video) {\n      await commit(\"SET_VIDEO_ID\", video.id);\n      await resourcesRef\n        .doc(state.videoID)\n        .delete()\n        .then(() => {\n          console.log(\"Successfully deleted\");\n        });\n      commit(\"SET_VIDEO_ID\", null);\n      dispatch(\"clearVideoForm\");\n    },\n  },\n  mutations: {\n    ...vuexfireMutations,\n    updateField,\n    SET_VIDEOS: (state, videos) => (state.videos = videos),\n    SET_VIDEO_ID: (state, id) => (state.videoID = id),\n    SET_YOUTUBE_URL: (state, url) => (state.currentVideoResource.url = url),\n    SET_YOUTUBE_ID: (state, id) => (state.videoURL = id),\n    SET_VIDEO_PROPS: (state, props) =>\n      (state.currentVideoResource = {\n        ...state.currentVideoResource,\n        ...props,\n      }),\n    SET_VIDEO_TOPIC_ID: (state, id) => {\n      state.currentVideoResource.topicID.push(id);\n    },\n    SET_SEARCH_ARRAY: (state, array) => {\n      //* splits the words into strings and stores in newArray\n      let newArray = array.split(\" \");\n      state.currentVideoResource.searchArray.push(...newArray);\n    },\n    SET_CURRENT_VIDEO_RESOURCE: (state, fields) =>\n      (state.currentVideoResource = fields),\n    UPDATE_SEARCH_ARRAY: (state, array) => {\n      let newArray = array.split(\" \");\n      state.currentVideoResource.searchArray = newArray;\n    },\n    UPDATE_VIDEOS: (state) => state.videos.push(state.currentVideoResource),\n    UPDATE_VIDEOS_ID: (state, id) => {\n      state.videos.forEach(function(video) {\n        video.parentID = id;\n      });\n      console.log(\"8) update videos with eventids:\", state.videos);\n    },\n  },\n};\n"]}]}